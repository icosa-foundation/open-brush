#if UNITY_EDITOR || FBXSDK_RUNTIME
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Autodesk.Fbx {

public class FbxNodeAttribute : FbxObject {
  internal FbxNodeAttribute(global::System.IntPtr cPtr, bool ignored) : base(cPtr, ignored) { }

  // override void Dispose() {base.Dispose();}

  public new static FbxNodeAttribute Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = NativeMethods.FbxNodeAttribute_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxNodeAttribute ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNodeAttribute(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public new static FbxNodeAttribute Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = NativeMethods.FbxNodeAttribute_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxNodeAttribute ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNodeAttribute(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string sColor {
    get {
      string ret = NativeMethods.FbxNodeAttribute_sColor_get();
      return ret;
    } 
  }

  public static FbxDouble3 sDefaultColor {
    get {
      var ret = NativeMethods.FbxNodeAttribute_sDefaultColor_get();
      return ret;
    } 
  }

  public FbxPropertyDouble3 Color {
    get {
      FbxPropertyDouble3 ret = new FbxPropertyDouble3(NativeMethods.FbxNodeAttribute_Color_get(swigCPtr), false);
      if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public virtual FbxNodeAttribute.EType GetAttributeType() {
    FbxNodeAttribute.EType ret = (FbxNodeAttribute.EType)NativeMethods.FbxNodeAttribute_GetAttributeType(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNodeCount() {
    int ret = NativeMethods.FbxNodeAttribute_GetNodeCount(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxNode GetNode(int pIndex) {
    global::System.IntPtr cPtr = NativeMethods.FbxNodeAttribute_GetNode__SWIG_0(swigCPtr, pIndex);
    FbxNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNode(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxNode GetNode() {
    global::System.IntPtr cPtr = NativeMethods.FbxNodeAttribute_GetNode__SWIG_1(swigCPtr);
    FbxNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNode(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int GetHashCode(){
      return swigCPtr.Handle.GetHashCode();
  }

  public bool Equals(FbxNodeAttribute other) {
    if (object.ReferenceEquals(other, null)) { return false; }
    return this.swigCPtr.Handle.Equals (other.swigCPtr.Handle);
  }

  public override bool Equals(object obj){
    if (object.ReferenceEquals(obj, null)) { return false; }
    /* is obj a subclass of this type; if so use our Equals */
    var typed = obj as FbxNodeAttribute;
    if (!object.ReferenceEquals(typed, null)) {
      return this.Equals(typed);
    }
    /* are we a subclass of the other type; if so use their Equals */
    if (typeof(FbxNodeAttribute).IsSubclassOf(obj.GetType())) {
      return obj.Equals(this);
    }
    /* types are unrelated; can't be a match */
    return false;
  }

  public static bool operator == (FbxNodeAttribute a, FbxNodeAttribute b) {
    if (object.ReferenceEquals(a, b)) { return true; }
    if (object.ReferenceEquals(a, null) || object.ReferenceEquals(b, null)) { return false; }
    return a.Equals(b);
  }

  public static bool operator != (FbxNodeAttribute a, FbxNodeAttribute b) {
    return !(a == b);
  }

  public enum EType {
    eUnknown,
    eNull,
    eMarker,
    eSkeleton,
    eMesh,
    eNurbs,
    ePatch,
    eCamera,
    eCameraStereo,
    eCameraSwitcher,
    eLight,
    eOpticalReference,
    eOpticalMarker,
    eNurbsCurve,
    eTrimNurbsSurface,
    eBoundary,
    eNurbsSurface,
    eShape,
    eLODGroup,
    eSubDiv,
    eCachedEffect,
    eLine
  }

}

}

#endif // UNITY_EDITOR || FBXSDK_RUNTIME