#if UNITY_EDITOR || FBXSDK_RUNTIME
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Autodesk.Fbx {

public class FbxAxisSystem : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FbxAxisSystem(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxAxisSystem obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FbxAxisSystem() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativeMethods.delete_FbxAxisSystem(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public FbxAxisSystem() : this(NativeMethods.new_FbxAxisSystem__SWIG_0(), true) {
  }

  public FbxAxisSystem(EUpVector pUpVector, EFrontVector pFrontVector, FbxAxisSystem.ECoordSystem pCoorSystem) : this(NativeMethods.new_FbxAxisSystem__SWIG_1((int)pUpVector, (int)pFrontVector, (int)pCoorSystem), true) {
  }

  public FbxAxisSystem(FbxAxisSystem pAxisSystem) : this(NativeMethods.new_FbxAxisSystem__SWIG_2(FbxAxisSystem.getCPtr(pAxisSystem)), true) {
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public FbxAxisSystem(FbxAxisSystem.EPreDefinedAxisSystem pAxisSystem) : this(NativeMethods.new_FbxAxisSystem__SWIG_3((int)pAxisSystem), true) {
  }

  private bool _equals(FbxAxisSystem pAxisSystem) {
    bool ret = NativeMethods.FbxAxisSystem__equals(swigCPtr, FbxAxisSystem.getCPtr(pAxisSystem));
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxAxisSystem MayaZUp {
    get {
      FbxAxisSystem ret = new FbxAxisSystem(NativeMethods.FbxAxisSystem_MayaZUp_get(), false);
      return ret;
    } 
  }

  public static FbxAxisSystem MayaYUp {
    get {
      FbxAxisSystem ret = new FbxAxisSystem(NativeMethods.FbxAxisSystem_MayaYUp_get(), false);
      return ret;
    } 
  }

  public static FbxAxisSystem Max {
    get {
      FbxAxisSystem ret = new FbxAxisSystem(NativeMethods.FbxAxisSystem_Max_get(), false);
      return ret;
    } 
  }

  public static FbxAxisSystem Motionbuilder {
    get {
      FbxAxisSystem ret = new FbxAxisSystem(NativeMethods.FbxAxisSystem_Motionbuilder_get(), false);
      return ret;
    } 
  }

  public static FbxAxisSystem OpenGL {
    get {
      FbxAxisSystem ret = new FbxAxisSystem(NativeMethods.FbxAxisSystem_OpenGL_get(), false);
      return ret;
    } 
  }

  public static FbxAxisSystem DirectX {
    get {
      FbxAxisSystem ret = new FbxAxisSystem(NativeMethods.FbxAxisSystem_DirectX_get(), false);
      return ret;
    } 
  }

  public static FbxAxisSystem Lightwave {
    get {
      FbxAxisSystem ret = new FbxAxisSystem(NativeMethods.FbxAxisSystem_Lightwave_get(), false);
      return ret;
    } 
  }

  public void DeepConvertScene(FbxScene pScene) {
    NativeMethods.FbxAxisSystem_DeepConvertScene(swigCPtr, FbxScene.getCPtr(pScene));
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public void ConvertScene(FbxScene pScene) {
    NativeMethods.FbxAxisSystem_ConvertScene(swigCPtr, FbxScene.getCPtr(pScene));
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public FbxAxisSystem.ECoordSystem GetCoorSystem() {
    FbxAxisSystem.ECoordSystem ret = (FbxAxisSystem.ECoordSystem)NativeMethods.FbxAxisSystem_GetCoorSystem(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum EUpVector {
    eXAxis = 1, eXAxisDown = -1,
    eYAxis = 2, eYAxisDown = -2,
    eZAxis = 3, eZAxisDown = -3,
  };
  public enum EFrontVector {
    eParityEven = 1, eParityEvenNegative = -1,
    eParityOdd = 2, eParityOddNegative = -2,
  };
  
  public EUpVector GetUpVector() {
    EUpVector result = (EUpVector)NativeMethods.FbxAxisSystem_GetUpVector(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();;
    return result;
  }

  public EFrontVector GetFrontVector() {
    EFrontVector result = (EFrontVector)NativeMethods.FbxAxisSystem_GetFrontVector(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();;
    return result;
  }

  public bool Equals(FbxAxisSystem other) {
    if (object.ReferenceEquals(other, null)) { return false; }
    return _equals(other);
  }

  public override bool Equals(object obj){
    if (object.ReferenceEquals(obj, null)) { return false; }
    /* is obj a subclass of this type; if so use our Equals */
    var typed = obj as FbxAxisSystem;
    if (!object.ReferenceEquals(typed, null)) {
      return this.Equals(typed);
    }
    /* are we a subclass of the other type; if so use their Equals */
    if (typeof(FbxAxisSystem).IsSubclassOf(obj.GetType())) {
      return obj.Equals(this);
    }
    /* types are unrelated; can't be a match */
    return false;
  }

  public static bool operator == (FbxAxisSystem a, FbxAxisSystem b) {
    if (object.ReferenceEquals(a, b)) { return true; }
    if (object.ReferenceEquals(a, null) || object.ReferenceEquals(b, null)) { return false; }
    return a.Equals(b);
  }

  public static bool operator != (FbxAxisSystem a, FbxAxisSystem b) {
    return !(a == b);
  }

  public override int GetHashCode() {
    int ret = NativeMethods.FbxAxisSystem_GetHashCode(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum ECoordSystem {
    eRightHanded,
    eLeftHanded
  }

  public enum EPreDefinedAxisSystem {
    eMayaZUp,
    eMayaYUp,
    eMax,
    eMotionBuilder,
    eOpenGL,
    eDirectX,
    eLightwave
  }

}

}

#endif // UNITY_EDITOR || FBXSDK_RUNTIME