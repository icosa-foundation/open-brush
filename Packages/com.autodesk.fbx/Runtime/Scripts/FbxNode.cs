#if UNITY_EDITOR || FBXSDK_RUNTIME
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Autodesk.Fbx {

public class FbxNode : FbxObject {
  internal FbxNode(global::System.IntPtr cPtr, bool ignored) : base(cPtr, ignored) { }

  // override void Dispose() {base.Dispose();}

  public new static FbxNode Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = NativeMethods.FbxNode_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNode(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public new static FbxNode Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = NativeMethods.FbxNode_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNode(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxNode GetParent() {
    global::System.IntPtr cPtr = NativeMethods.FbxNode_GetParent(swigCPtr);
    FbxNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNode(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddChild(FbxNode pNode) {
    bool ret = NativeMethods.FbxNode_AddChild(swigCPtr, FbxNode.getCPtr(pNode));
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxNode RemoveChild(FbxNode pNode) {
    global::System.IntPtr cPtr = NativeMethods.FbxNode_RemoveChild(swigCPtr, FbxNode.getCPtr(pNode));
    FbxNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNode(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetChildCount(bool pRecursive) {
    int ret = NativeMethods.FbxNode_GetChildCount__SWIG_0(swigCPtr, pRecursive);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetChildCount() {
    int ret = NativeMethods.FbxNode_GetChildCount__SWIG_1(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxNode GetChild(int pIndex) {
    global::System.IntPtr cPtr = NativeMethods.FbxNode_GetChild(swigCPtr, pIndex);
    FbxNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNode(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxNode FindChild(string pName, bool pRecursive, bool pInitial) {
    global::System.IntPtr cPtr = NativeMethods.FbxNode_FindChild__SWIG_0(swigCPtr, pName, pRecursive, pInitial);
    FbxNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNode(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxNode FindChild(string pName, bool pRecursive) {
    global::System.IntPtr cPtr = NativeMethods.FbxNode_FindChild__SWIG_1(swigCPtr, pName, pRecursive);
    FbxNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNode(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxNode FindChild(string pName) {
    global::System.IntPtr cPtr = NativeMethods.FbxNode_FindChild__SWIG_2(swigCPtr, pName);
    FbxNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNode(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetVisibility(bool pIsVisible) {
    NativeMethods.FbxNode_SetVisibility(swigCPtr, pIsVisible);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public bool GetVisibility() {
    bool ret = NativeMethods.FbxNode_GetVisibility(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetShadingMode(FbxNode.EShadingMode pShadingMode) {
    NativeMethods.FbxNode_SetShadingMode(swigCPtr, (int)pShadingMode);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public FbxNode.EShadingMode GetShadingMode() {
    FbxNode.EShadingMode ret = (FbxNode.EShadingMode)NativeMethods.FbxNode_GetShadingMode(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxNodeAttribute SetNodeAttribute(FbxNodeAttribute pNodeAttribute) {
    global::System.IntPtr cPtr = NativeMethods.FbxNode_SetNodeAttribute(swigCPtr, FbxNodeAttribute.getCPtr(pNodeAttribute));
    FbxNodeAttribute ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNodeAttribute(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxNodeAttribute GetNodeAttribute() {
    global::System.IntPtr cPtr = NativeMethods.FbxNode_GetNodeAttribute(swigCPtr);
    FbxNodeAttribute ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNodeAttribute(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxSkeleton GetSkeleton() {
    global::System.IntPtr cPtr = NativeMethods.FbxNode_GetSkeleton(swigCPtr);
    FbxSkeleton ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxSkeleton(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxGeometry GetGeometry() {
    global::System.IntPtr cPtr = NativeMethods.FbxNode_GetGeometry(swigCPtr);
    FbxGeometry ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxGeometry(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxMesh GetMesh() {
    global::System.IntPtr cPtr = NativeMethods.FbxNode_GetMesh(swigCPtr);
    FbxMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxMesh(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxNurbsCurve GetNurbsCurve() {
    global::System.IntPtr cPtr = NativeMethods.FbxNode_GetNurbsCurve(swigCPtr);
    FbxNurbsCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNurbsCurve(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxCamera GetCamera() {
    global::System.IntPtr cPtr = NativeMethods.FbxNode_GetCamera(swigCPtr);
    FbxCamera ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxCamera(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxLight GetLight() {
    global::System.IntPtr cPtr = NativeMethods.FbxNode_GetLight(swigCPtr);
    FbxLight ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxLight(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTransformationInheritType(FbxTransform.EInheritType pInheritType) {
    NativeMethods.FbxNode_SetTransformationInheritType(swigCPtr, (int)pInheritType);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public void SetPivotState(FbxNode.EPivotSet pPivotSet, FbxNode.EPivotState pPivotState) {
    NativeMethods.FbxNode_SetPivotState(swigCPtr, (int)pPivotSet, (int)pPivotState);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public void SetRotationOrder(FbxNode.EPivotSet pPivotSet, FbxEuler.EOrder pRotationOrder) {
    NativeMethods.FbxNode_SetRotationOrder(swigCPtr, (int)pPivotSet, (int)pRotationOrder);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public void GetRotationOrder(FbxNode.EPivotSet pPivotSet, out int pRotationOrder) {
    NativeMethods.FbxNode_GetRotationOrder(swigCPtr, (int)pPivotSet, out pRotationOrder);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public void SetRotationActive(bool pVal) {
    NativeMethods.FbxNode_SetRotationActive(swigCPtr, pVal);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public bool GetRotationActive() {
    bool ret = NativeMethods.FbxNode_GetRotationActive(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetQuaternionInterpolation(FbxNode.EPivotSet pPivotSet, SWIGTYPE_EFbxQuatInterpMode pQuatIterp) {
    NativeMethods.FbxNode_SetQuaternionInterpolation(swigCPtr, (int)pPivotSet, (int)pQuatIterp);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_EFbxQuatInterpMode GetQuaternionInterpolation(FbxNode.EPivotSet pPivotSet) {
    SWIGTYPE_EFbxQuatInterpMode ret = (SWIGTYPE_EFbxQuatInterpMode)NativeMethods.FbxNode_GetQuaternionInterpolation(swigCPtr, (int)pPivotSet);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetRotationOffset(FbxNode.EPivotSet pPivotSet, FbxVector4 pVector) {
    NativeMethods.FbxNode_SetRotationOffset(swigCPtr, (int)pPivotSet, pVector);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public FbxVector4 GetRotationOffset(FbxNode.EPivotSet pPivotSet) {
    var ret = NativeMethods.FbxNode_GetRotationOffset(swigCPtr, (int)pPivotSet);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetRotationPivot(FbxNode.EPivotSet pPivotSet, FbxVector4 pVector) {
    NativeMethods.FbxNode_SetRotationPivot(swigCPtr, (int)pPivotSet, pVector);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public FbxVector4 GetRotationPivot(FbxNode.EPivotSet pPivotSet) {
    var ret = NativeMethods.FbxNode_GetRotationPivot(swigCPtr, (int)pPivotSet);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetPreRotation(FbxNode.EPivotSet pPivotSet, FbxVector4 pVector) {
    NativeMethods.FbxNode_SetPreRotation(swigCPtr, (int)pPivotSet, pVector);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public FbxVector4 GetPreRotation(FbxNode.EPivotSet pPivotSet) {
    var ret = NativeMethods.FbxNode_GetPreRotation(swigCPtr, (int)pPivotSet);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetPostRotation(FbxNode.EPivotSet pPivotSet, FbxVector4 pVector) {
    NativeMethods.FbxNode_SetPostRotation(swigCPtr, (int)pPivotSet, pVector);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public FbxVector4 GetPostRotation(FbxNode.EPivotSet pPivotSet) {
    var ret = NativeMethods.FbxNode_GetPostRotation(swigCPtr, (int)pPivotSet);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetScalingOffset(FbxNode.EPivotSet pPivotSet, FbxVector4 pVector) {
    NativeMethods.FbxNode_SetScalingOffset(swigCPtr, (int)pPivotSet, pVector);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public FbxVector4 GetScalingOffset(FbxNode.EPivotSet pPivotSet) {
    var ret = NativeMethods.FbxNode_GetScalingOffset(swigCPtr, (int)pPivotSet);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetScalingPivot(FbxNode.EPivotSet pPivotSet, FbxVector4 pVector) {
    NativeMethods.FbxNode_SetScalingPivot(swigCPtr, (int)pPivotSet, pVector);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public FbxVector4 GetScalingPivot(FbxNode.EPivotSet pPivotSet) {
    var ret = NativeMethods.FbxNode_GetScalingPivot(swigCPtr, (int)pPivotSet);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetGeometricTranslation(FbxNode.EPivotSet pPivotSet, FbxVector4 pVector) {
    NativeMethods.FbxNode_SetGeometricTranslation(swigCPtr, (int)pPivotSet, pVector);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public void SetGeometricRotation(FbxNode.EPivotSet pPivotSet, FbxVector4 pVector) {
    NativeMethods.FbxNode_SetGeometricRotation(swigCPtr, (int)pPivotSet, pVector);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public void SetGeometricScaling(FbxNode.EPivotSet pPivotSet, FbxVector4 pVector) {
    NativeMethods.FbxNode_SetGeometricScaling(swigCPtr, (int)pPivotSet, pVector);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public void ConvertPivotAnimationRecursive(FbxAnimStack pAnimStack, FbxNode.EPivotSet pConversionTarget, double pFrameRate, bool pKeyReduce) {
    NativeMethods.FbxNode_ConvertPivotAnimationRecursive__SWIG_0(swigCPtr, FbxAnimStack.getCPtr(pAnimStack), (int)pConversionTarget, pFrameRate, pKeyReduce);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public void ConvertPivotAnimationRecursive(FbxAnimStack pAnimStack, FbxNode.EPivotSet pConversionTarget, double pFrameRate) {
    NativeMethods.FbxNode_ConvertPivotAnimationRecursive__SWIG_1(swigCPtr, FbxAnimStack.getCPtr(pAnimStack), (int)pConversionTarget, pFrameRate);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public FbxAMatrix EvaluateGlobalTransform(FbxTime pTime, FbxNode.EPivotSet pPivotSet, bool pApplyTarget, bool pForceEval) {
    FbxAMatrix ret = new FbxAMatrix(NativeMethods.FbxNode_EvaluateGlobalTransform__SWIG_0(swigCPtr, FbxTime.getCPtr(pTime), (int)pPivotSet, pApplyTarget, pForceEval), false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxAMatrix EvaluateGlobalTransform(FbxTime pTime, FbxNode.EPivotSet pPivotSet, bool pApplyTarget) {
    FbxAMatrix ret = new FbxAMatrix(NativeMethods.FbxNode_EvaluateGlobalTransform__SWIG_1(swigCPtr, FbxTime.getCPtr(pTime), (int)pPivotSet, pApplyTarget), false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxAMatrix EvaluateGlobalTransform(FbxTime pTime, FbxNode.EPivotSet pPivotSet) {
    FbxAMatrix ret = new FbxAMatrix(NativeMethods.FbxNode_EvaluateGlobalTransform__SWIG_2(swigCPtr, FbxTime.getCPtr(pTime), (int)pPivotSet), false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxAMatrix EvaluateGlobalTransform(FbxTime pTime) {
    FbxAMatrix ret = new FbxAMatrix(NativeMethods.FbxNode_EvaluateGlobalTransform__SWIG_3(swigCPtr, FbxTime.getCPtr(pTime)), false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxAMatrix EvaluateGlobalTransform() {
    FbxAMatrix ret = new FbxAMatrix(NativeMethods.FbxNode_EvaluateGlobalTransform__SWIG_4(swigCPtr), false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxAMatrix EvaluateLocalTransform(FbxTime pTime, FbxNode.EPivotSet pPivotSet, bool pApplyTarget, bool pForceEval) {
    FbxAMatrix ret = new FbxAMatrix(NativeMethods.FbxNode_EvaluateLocalTransform__SWIG_0(swigCPtr, FbxTime.getCPtr(pTime), (int)pPivotSet, pApplyTarget, pForceEval), false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxAMatrix EvaluateLocalTransform(FbxTime pTime, FbxNode.EPivotSet pPivotSet, bool pApplyTarget) {
    FbxAMatrix ret = new FbxAMatrix(NativeMethods.FbxNode_EvaluateLocalTransform__SWIG_1(swigCPtr, FbxTime.getCPtr(pTime), (int)pPivotSet, pApplyTarget), false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxAMatrix EvaluateLocalTransform(FbxTime pTime, FbxNode.EPivotSet pPivotSet) {
    FbxAMatrix ret = new FbxAMatrix(NativeMethods.FbxNode_EvaluateLocalTransform__SWIG_2(swigCPtr, FbxTime.getCPtr(pTime), (int)pPivotSet), false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxAMatrix EvaluateLocalTransform(FbxTime pTime) {
    FbxAMatrix ret = new FbxAMatrix(NativeMethods.FbxNode_EvaluateLocalTransform__SWIG_3(swigCPtr, FbxTime.getCPtr(pTime)), false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxAMatrix EvaluateLocalTransform() {
    FbxAMatrix ret = new FbxAMatrix(NativeMethods.FbxNode_EvaluateLocalTransform__SWIG_4(swigCPtr), false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public int AddMaterial(FbxSurfaceMaterial pMaterial) {
    int ret = NativeMethods.FbxNode_AddMaterial(swigCPtr, FbxSurfaceMaterial.getCPtr(pMaterial));
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetMaterialCount() {
    int ret = NativeMethods.FbxNode_GetMaterialCount(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxSurfaceMaterial GetMaterial(int pIndex) {
    global::System.IntPtr cPtr = NativeMethods.FbxNode_GetMaterial(swigCPtr, pIndex);
    FbxSurfaceMaterial ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxSurfaceMaterial(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetMaterialIndex(string pName) {
    int ret = NativeMethods.FbxNode_GetMaterialIndex(swigCPtr, pName);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxPropertyDouble3 LclTranslation {
    get {
      FbxPropertyDouble3 ret = new FbxPropertyDouble3(NativeMethods.FbxNode_LclTranslation_get(swigCPtr), false);
      if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public FbxPropertyDouble3 LclRotation {
    get {
      FbxPropertyDouble3 ret = new FbxPropertyDouble3(NativeMethods.FbxNode_LclRotation_get(swigCPtr), false);
      if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public FbxPropertyDouble3 LclScaling {
    get {
      FbxPropertyDouble3 ret = new FbxPropertyDouble3(NativeMethods.FbxNode_LclScaling_get(swigCPtr), false);
      if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public FbxPropertyBool VisibilityInheritance {
    get {
      FbxPropertyBool ret = new FbxPropertyBool(NativeMethods.FbxNode_VisibilityInheritance_get(swigCPtr), false);
      if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public FbxPropertyEInheritType InheritType {
    get {
      FbxPropertyEInheritType ret = new FbxPropertyEInheritType(NativeMethods.FbxNode_InheritType_get(swigCPtr), false);
      if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public override int GetHashCode(){
      return swigCPtr.Handle.GetHashCode();
  }

  public bool Equals(FbxNode other) {
    if (object.ReferenceEquals(other, null)) { return false; }
    return this.swigCPtr.Handle.Equals (other.swigCPtr.Handle);
  }

  public override bool Equals(object obj){
    if (object.ReferenceEquals(obj, null)) { return false; }
    /* is obj a subclass of this type; if so use our Equals */
    var typed = obj as FbxNode;
    if (!object.ReferenceEquals(typed, null)) {
      return this.Equals(typed);
    }
    /* are we a subclass of the other type; if so use their Equals */
    if (typeof(FbxNode).IsSubclassOf(obj.GetType())) {
      return obj.Equals(this);
    }
    /* types are unrelated; can't be a match */
    return false;
  }

  public static bool operator == (FbxNode a, FbxNode b) {
    if (object.ReferenceEquals(a, b)) { return true; }
    if (object.ReferenceEquals(a, null) || object.ReferenceEquals(b, null)) { return false; }
    return a.Equals(b);
  }

  public static bool operator != (FbxNode a, FbxNode b) {
    return !(a == b);
  }

  public FbxLimits GetTranslationLimits() {
    FbxLimits ret = new FbxLimits(NativeMethods.FbxNode_GetTranslationLimits(swigCPtr), false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxLimits GetRotationLimits() {
    FbxLimits ret = new FbxLimits(NativeMethods.FbxNode_GetRotationLimits(swigCPtr), false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxLimits GetScalingLimits() {
    FbxLimits ret = new FbxLimits(NativeMethods.FbxNode_GetScalingLimits(swigCPtr), false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum EShadingMode {
    eHardShading,
    eWireFrame,
    eFlatShading,
    eLightShading,
    eTextureShading,
    eFullShading
  }

  public enum EPivotSet {
    eSourcePivot,
    eDestinationPivot
  }

  public enum EPivotState {
    ePivotActive,
    ePivotReference
  }

}

}

#endif // UNITY_EDITOR || FBXSDK_RUNTIME