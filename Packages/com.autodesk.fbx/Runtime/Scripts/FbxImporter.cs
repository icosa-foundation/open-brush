#if UNITY_EDITOR || FBXSDK_RUNTIME
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Autodesk.Fbx {

public class FbxImporter : FbxIOBase {
  internal FbxImporter(global::System.IntPtr cPtr, bool ignored) : base(cPtr, ignored) { }

  // override void Dispose() {base.Dispose();}

  public new static FbxImporter Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = NativeMethods.FbxImporter_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxImporter ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxImporter(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public new static FbxImporter Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = NativeMethods.FbxImporter_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxImporter ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxImporter(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetFileVersion(out int pMajor, out int pMinor, out int pRevision) {
    NativeMethods.FbxImporter_GetFileVersion(swigCPtr, out pMajor, out pMinor, out pRevision);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public FbxIOFileHeaderInfo GetFileHeaderInfo() {
    global::System.IntPtr cPtr = NativeMethods.FbxImporter_GetFileHeaderInfo(swigCPtr);
    FbxIOFileHeaderInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxIOFileHeaderInfo(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Import(FbxDocument pDocument) {
    bool ret = NativeMethods.FbxImporter_Import(swigCPtr, FbxDocument.getCPtr(pDocument));
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetAnimStackCount() {
    int ret = NativeMethods.FbxImporter_GetAnimStackCount(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetActiveAnimStackName() {
    string ret = NativeMethods.FbxImporter_GetActiveAnimStackName(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsFBX() {
    bool ret = NativeMethods.FbxImporter_IsFBX(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int GetHashCode(){
      return swigCPtr.Handle.GetHashCode();
  }

  public bool Equals(FbxImporter other) {
    if (object.ReferenceEquals(other, null)) { return false; }
    return this.swigCPtr.Handle.Equals (other.swigCPtr.Handle);
  }

  public override bool Equals(object obj){
    if (object.ReferenceEquals(obj, null)) { return false; }
    /* is obj a subclass of this type; if so use our Equals */
    var typed = obj as FbxImporter;
    if (!object.ReferenceEquals(typed, null)) {
      return this.Equals(typed);
    }
    /* are we a subclass of the other type; if so use their Equals */
    if (typeof(FbxImporter).IsSubclassOf(obj.GetType())) {
      return obj.Equals(this);
    }
    /* types are unrelated; can't be a match */
    return false;
  }

  public static bool operator == (FbxImporter a, FbxImporter b) {
    if (object.ReferenceEquals(a, b)) { return true; }
    if (object.ReferenceEquals(a, null) || object.ReferenceEquals(b, null)) { return false; }
    return a.Equals(b);
  }

  public static bool operator != (FbxImporter a, FbxImporter b) {
    return !(a == b);
  }

  private void SetFbxSharpProgressCallback(FbxSharpProgressCallback callback) {
    NativeMethods.FbxImporter_SetFbxSharpProgressCallback(swigCPtr, FbxSharpProgressCallback.getCPtr(callback));
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  FbxSharpProgressCallback m_progressCallback;

  public void SetProgressCallback(Globals.FbxProgressCallback callback) {
    if (m_progressCallback != null) { m_progressCallback.Dispose(); }
    m_progressCallback = (callback == null) ? null : new FbxSharpProgressCallback.Wrapper(callback);
    SetFbxSharpProgressCallback(m_progressCallback);
  } 
}

}

#endif // UNITY_EDITOR || FBXSDK_RUNTIME