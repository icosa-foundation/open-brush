#if UNITY_EDITOR || FBXSDK_RUNTIME
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Autodesk.Fbx {

public class FbxProperty : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FbxProperty(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxProperty obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static FbxProperty Create(FbxProperty pCompoundProperty, FbxDataType pDataType, string pName, string pLabel, bool pCheckForDup, out bool pWasFound) {
    FbxProperty ret = new FbxProperty(NativeMethods.FbxProperty_Create__SWIG_0(FbxProperty.getCPtr(pCompoundProperty), FbxDataType.getCPtr(pDataType), pName, pLabel, pCheckForDup, out pWasFound), true);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxProperty Create(FbxProperty pCompoundProperty, FbxDataType pDataType, string pName, string pLabel, bool pCheckForDup) {
    FbxProperty ret = new FbxProperty(NativeMethods.FbxProperty_Create__SWIG_1(FbxProperty.getCPtr(pCompoundProperty), FbxDataType.getCPtr(pDataType), pName, pLabel, pCheckForDup), true);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxProperty Create(FbxProperty pCompoundProperty, FbxDataType pDataType, string pName, string pLabel) {
    FbxProperty ret = new FbxProperty(NativeMethods.FbxProperty_Create__SWIG_2(FbxProperty.getCPtr(pCompoundProperty), FbxDataType.getCPtr(pDataType), pName, pLabel), true);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxProperty Create(FbxProperty pCompoundProperty, FbxDataType pDataType, string pName) {
    FbxProperty ret = new FbxProperty(NativeMethods.FbxProperty_Create__SWIG_3(FbxProperty.getCPtr(pCompoundProperty), FbxDataType.getCPtr(pDataType), pName), true);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxProperty Create(FbxObject pObject, FbxDataType pDataType, string pName, string pLabel, bool pCheckForDup, out bool pWasFound) {
    FbxProperty ret = new FbxProperty(NativeMethods.FbxProperty_Create__SWIG_4(FbxObject.getCPtr(pObject), FbxDataType.getCPtr(pDataType), pName, pLabel, pCheckForDup, out pWasFound), true);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxProperty Create(FbxObject pObject, FbxDataType pDataType, string pName, string pLabel, bool pCheckForDup) {
    FbxProperty ret = new FbxProperty(NativeMethods.FbxProperty_Create__SWIG_5(FbxObject.getCPtr(pObject), FbxDataType.getCPtr(pDataType), pName, pLabel, pCheckForDup), true);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxProperty Create(FbxObject pObject, FbxDataType pDataType, string pName, string pLabel) {
    FbxProperty ret = new FbxProperty(NativeMethods.FbxProperty_Create__SWIG_6(FbxObject.getCPtr(pObject), FbxDataType.getCPtr(pDataType), pName, pLabel), true);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxProperty Create(FbxObject pObject, FbxDataType pDataType, string pName) {
    FbxProperty ret = new FbxProperty(NativeMethods.FbxProperty_Create__SWIG_7(FbxObject.getCPtr(pObject), FbxDataType.getCPtr(pDataType), pName), true);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Destroy() {
    NativeMethods.FbxProperty_Destroy(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public void DestroyRecursively() {
    NativeMethods.FbxProperty_DestroyRecursively(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public void DestroyChildren() {
    NativeMethods.FbxProperty_DestroyChildren(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public FbxDataType GetPropertyDataType() {
    FbxDataType ret = new FbxDataType(NativeMethods.FbxProperty_GetPropertyDataType(swigCPtr), true);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetName() {
    string ret = NativeMethods.FbxProperty_GetName(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetHierarchicalName() {
    string ret = NativeMethods.FbxProperty_GetHierarchicalName(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetLabel(bool pReturnNameIfEmpty) {
    string ret = NativeMethods.FbxProperty_GetLabel__SWIG_0(swigCPtr, pReturnNameIfEmpty);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetLabel() {
    string ret = NativeMethods.FbxProperty_GetLabel__SWIG_1(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetLabel(string pLabel) {
    NativeMethods.FbxProperty_SetLabel(swigCPtr, pLabel);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public FbxObject GetFbxObject() {
    global::System.IntPtr cPtr = NativeMethods.FbxProperty_GetFbxObject(swigCPtr);
    FbxObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxObject(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ModifyFlag(FbxPropertyFlags.EFlags pFlag, bool pValue) {
    NativeMethods.FbxProperty_ModifyFlag(swigCPtr, (int)pFlag, pValue);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public bool GetFlag(FbxPropertyFlags.EFlags pFlag) {
    bool ret = NativeMethods.FbxProperty_GetFlag(swigCPtr, (int)pFlag);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxPropertyFlags.EFlags GetFlags() {
    FbxPropertyFlags.EFlags ret = (FbxPropertyFlags.EFlags)NativeMethods.FbxProperty_GetFlags(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxPropertyFlags.EInheritType GetFlagInheritType(FbxPropertyFlags.EFlags pFlag) {
    FbxPropertyFlags.EInheritType ret = (FbxPropertyFlags.EInheritType)NativeMethods.FbxProperty_GetFlagInheritType(swigCPtr, (int)pFlag);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetFlagInheritType(FbxPropertyFlags.EFlags pFlag, FbxPropertyFlags.EInheritType pType) {
    bool ret = NativeMethods.FbxProperty_SetFlagInheritType(swigCPtr, (int)pFlag, (int)pType);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ModifiedFlag(FbxPropertyFlags.EFlags pFlag) {
    bool ret = NativeMethods.FbxProperty_ModifiedFlag(swigCPtr, (int)pFlag);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool _equals(FbxProperty pProperty) {
    bool ret = NativeMethods.FbxProperty__equals(swigCPtr, FbxProperty.getCPtr(pProperty));
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsValid() {
    bool ret = NativeMethods.FbxProperty_IsValid(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxAnimCurveNode GetCurveNode(bool pCreate) {
    global::System.IntPtr cPtr = NativeMethods.FbxProperty_GetCurveNode__SWIG_0(swigCPtr, pCreate);
    FbxAnimCurveNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAnimCurveNode(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxAnimCurveNode GetCurveNode() {
    global::System.IntPtr cPtr = NativeMethods.FbxProperty_GetCurveNode__SWIG_1(swigCPtr);
    FbxAnimCurveNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAnimCurveNode(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxAnimCurveNode GetCurveNode(FbxAnimStack pAnimStack, bool pCreate) {
    global::System.IntPtr cPtr = NativeMethods.FbxProperty_GetCurveNode__SWIG_2(swigCPtr, FbxAnimStack.getCPtr(pAnimStack), pCreate);
    FbxAnimCurveNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAnimCurveNode(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxAnimCurveNode GetCurveNode(FbxAnimStack pAnimStack) {
    global::System.IntPtr cPtr = NativeMethods.FbxProperty_GetCurveNode__SWIG_3(swigCPtr, FbxAnimStack.getCPtr(pAnimStack));
    FbxAnimCurveNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAnimCurveNode(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxAnimCurveNode GetCurveNode(FbxAnimLayer pAnimLayer, bool pCreate) {
    global::System.IntPtr cPtr = NativeMethods.FbxProperty_GetCurveNode__SWIG_4(swigCPtr, FbxAnimLayer.getCPtr(pAnimLayer), pCreate);
    FbxAnimCurveNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAnimCurveNode(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxAnimCurveNode GetCurveNode(FbxAnimLayer pAnimLayer) {
    global::System.IntPtr cPtr = NativeMethods.FbxProperty_GetCurveNode__SWIG_5(swigCPtr, FbxAnimLayer.getCPtr(pAnimLayer));
    FbxAnimCurveNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAnimCurveNode(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxAnimCurve GetCurve(FbxAnimLayer pAnimLayer, bool pCreate) {
    global::System.IntPtr cPtr = NativeMethods.FbxProperty_GetCurve__SWIG_0(swigCPtr, FbxAnimLayer.getCPtr(pAnimLayer), pCreate);
    FbxAnimCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAnimCurve(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxAnimCurve GetCurve(FbxAnimLayer pAnimLayer) {
    global::System.IntPtr cPtr = NativeMethods.FbxProperty_GetCurve__SWIG_1(swigCPtr, FbxAnimLayer.getCPtr(pAnimLayer));
    FbxAnimCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAnimCurve(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxAnimCurve GetCurve(FbxAnimLayer pAnimLayer, string pChannel, bool pCreate) {
    global::System.IntPtr cPtr = NativeMethods.FbxProperty_GetCurve__SWIG_2(swigCPtr, FbxAnimLayer.getCPtr(pAnimLayer), pChannel, pCreate);
    FbxAnimCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAnimCurve(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxAnimCurve GetCurve(FbxAnimLayer pAnimLayer, string pChannel) {
    global::System.IntPtr cPtr = NativeMethods.FbxProperty_GetCurve__SWIG_3(swigCPtr, FbxAnimLayer.getCPtr(pAnimLayer), pChannel);
    FbxAnimCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAnimCurve(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxAnimCurve GetCurve(FbxAnimLayer pAnimLayer, string pName, string pChannel, bool pCreate) {
    global::System.IntPtr cPtr = NativeMethods.FbxProperty_GetCurve__SWIG_4(swigCPtr, FbxAnimLayer.getCPtr(pAnimLayer), pName, pChannel, pCreate);
    FbxAnimCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAnimCurve(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ConnectSrcObject(FbxObject pObject, FbxConnection.EType pType) {
    bool ret = NativeMethods.FbxProperty_ConnectSrcObject__SWIG_0(swigCPtr, FbxObject.getCPtr(pObject), (int)pType);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ConnectSrcObject(FbxObject pObject) {
    bool ret = NativeMethods.FbxProperty_ConnectSrcObject__SWIG_1(swigCPtr, FbxObject.getCPtr(pObject));
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsConnectedSrcObject(FbxObject pObject) {
    bool ret = NativeMethods.FbxProperty_IsConnectedSrcObject(swigCPtr, FbxObject.getCPtr(pObject));
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DisconnectSrcObject(FbxObject pObject) {
    bool ret = NativeMethods.FbxProperty_DisconnectSrcObject(swigCPtr, FbxObject.getCPtr(pObject));
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DisconnectAllSrcObject() {
    bool ret = NativeMethods.FbxProperty_DisconnectAllSrcObject(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetSrcObjectCount() {
    int ret = NativeMethods.FbxProperty_GetSrcObjectCount(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxObject GetSrcObject(int pIndex) {
    global::System.IntPtr cPtr = NativeMethods.FbxProperty_GetSrcObject__SWIG_0(swigCPtr, pIndex);
    FbxObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxObject(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxObject GetSrcObject() {
    global::System.IntPtr cPtr = NativeMethods.FbxProperty_GetSrcObject__SWIG_1(swigCPtr);
    FbxObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxObject(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  private FbxObject FindSrcObjectInternal(string pName, int pStartIndex) {
    global::System.IntPtr cPtr = NativeMethods.FbxProperty_FindSrcObjectInternal(swigCPtr, pName, pStartIndex);
    FbxObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxObject(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ConnectDstObject(FbxObject pObject, FbxConnection.EType pType) {
    bool ret = NativeMethods.FbxProperty_ConnectDstObject__SWIG_0(swigCPtr, FbxObject.getCPtr(pObject), (int)pType);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ConnectDstObject(FbxObject pObject) {
    bool ret = NativeMethods.FbxProperty_ConnectDstObject__SWIG_1(swigCPtr, FbxObject.getCPtr(pObject));
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsConnectedDstObject(FbxObject pObject) {
    bool ret = NativeMethods.FbxProperty_IsConnectedDstObject(swigCPtr, FbxObject.getCPtr(pObject));
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DisconnectDstObject(FbxObject pObject) {
    bool ret = NativeMethods.FbxProperty_DisconnectDstObject(swigCPtr, FbxObject.getCPtr(pObject));
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DisconnectAllDstObject() {
    bool ret = NativeMethods.FbxProperty_DisconnectAllDstObject(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetDstObjectCount() {
    int ret = NativeMethods.FbxProperty_GetDstObjectCount(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxObject GetDstObject(int pIndex) {
    global::System.IntPtr cPtr = NativeMethods.FbxProperty_GetDstObject__SWIG_0(swigCPtr, pIndex);
    FbxObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxObject(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxObject GetDstObject() {
    global::System.IntPtr cPtr = NativeMethods.FbxProperty_GetDstObject__SWIG_1(swigCPtr);
    FbxObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxObject(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  private FbxObject FindDstObjectInternal(string pName, int pStartIndex) {
    global::System.IntPtr cPtr = NativeMethods.FbxProperty_FindDstObjectInternal(swigCPtr, pName, pStartIndex);
    FbxObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxObject(cPtr, false);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Equals(FbxProperty other) {
    if (object.ReferenceEquals(other, null)) { return false; }
    return _equals(other);
  }

  public override bool Equals(object obj){
    if (object.ReferenceEquals(obj, null)) { return false; }
    /* is obj a subclass of this type; if so use our Equals */
    var typed = obj as FbxProperty;
    if (!object.ReferenceEquals(typed, null)) {
      return this.Equals(typed);
    }
    /* are we a subclass of the other type; if so use their Equals */
    if (typeof(FbxProperty).IsSubclassOf(obj.GetType())) {
      return obj.Equals(this);
    }
    /* types are unrelated; can't be a match */
    return false;
  }

  public static bool operator == (FbxProperty a, FbxProperty b) {
    if (object.ReferenceEquals(a, b)) { return true; }
    if (object.ReferenceEquals(a, null) || object.ReferenceEquals(b, null)) { return false; }
    return a.Equals(b);
  }

  public static bool operator != (FbxProperty a, FbxProperty b) {
    return !(a == b);
  }

  public override int GetHashCode() {
    uint hash = (uint) GetName().GetHashCode();
    hash = (hash << 11) | (hash >> 21);
    hash ^= (uint) GetPropertyDataType().GetHashCode();
    var obj = GetFbxObject();
    if (obj != null) {
      hash = (hash << 11) | (hash >> 21);
      hash ^= (uint) obj.GetHashCode();
    }
    return (int) hash;
  } 
  public override string ToString() {
    return GetName();
  } 
  public FbxObject FindSrcObject(string pName, int pStartIndex = 0) {
    if (pName == null) { throw new System.ArgumentNullException("pName"); }
    return FindSrcObjectInternal(pName, pStartIndex);
  }

  public FbxObject FindDstObject(string pName, int pStartIndex = 0) {
    if (pName == null) { throw new System.ArgumentNullException("pName"); }
    return FindDstObjectInternal(pName, pStartIndex);
  }

  public float GetFloat() {
    float ret = NativeMethods.FbxProperty_GetFloat(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetBool() {
    bool ret = NativeMethods.FbxProperty_GetBool(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetDouble() {
    double ret = NativeMethods.FbxProperty_GetDouble(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxDouble3 GetFbxDouble3() {
    var ret = NativeMethods.FbxProperty_GetFbxDouble3(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetString() {
    string ret = NativeMethods.FbxProperty_GetString(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxColor GetFbxColor() {
    var ret = NativeMethods.FbxProperty_GetFbxColor(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetInt() {
    int ret = NativeMethods.FbxProperty_GetInt(swigCPtr);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Set(FbxColor pValue) {
    bool ret = NativeMethods.FbxProperty_Set__SWIG_1(swigCPtr, pValue);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Set(float pValue) {
    bool ret = NativeMethods.FbxProperty_Set__SWIG_2(swigCPtr, pValue);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Set(string pValue) {
    bool ret = NativeMethods.FbxProperty_Set__SWIG_3(swigCPtr, pValue);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFloat(float value) {
    NativeMethods.FbxProperty_SetFloat(swigCPtr, value);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public void SetString(string value) {
    NativeMethods.FbxProperty_SetString(swigCPtr, value);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public void SetDouble(double value) {
    NativeMethods.FbxProperty_SetDouble(swigCPtr, value);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public void SetBool(bool value) {
    NativeMethods.FbxProperty_SetBool(swigCPtr, value);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public void SetColor(FbxColor value) {
    NativeMethods.FbxProperty_SetColor(swigCPtr, value);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

  public void SetInt(int value) {
    NativeMethods.FbxProperty_SetInt(swigCPtr, value);
    if (NativeMethods.SWIGPendingException.Pending) throw NativeMethods.SWIGPendingException.Retrieve();
  }

}

}

#endif // UNITY_EDITOR || FBXSDK_RUNTIME