// Copyright 2024 The Open Brush Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System.Collections.Generic;
using UnityEngine;
using ControlPoint = TiltBrush.PointerManager.ControlPoint;

namespace TiltBrush
{
    /// <summary>
    /// Parametric stroke creator that replays a fixed set of control points generated by a ToolScript.
    /// </summary>
    public class ToolScriptStrokeCreator : ParametricStrokeCreator
    {
        private readonly List<ControlPoint> m_ControlPoints = new();

        public IReadOnlyList<ControlPoint> ControlPoints => m_ControlPoints;

        public ToolScriptStrokeCreator(IEnumerable<ControlPoint> controlPoints)
            : base(TrTransform.identity)
        {
            SetControlPoints(controlPoints);
        }

        public void SetControlPoints(IEnumerable<ControlPoint> controlPoints)
        {
            m_ControlPoints.Clear();
            if (controlPoints == null)
            {
                m_initialTransform = TrTransform.identity;
                return;
            }

            foreach (var cp in controlPoints)
            {
                m_ControlPoints.Add(cp);
            }

            if (m_ControlPoints.Count > 0)
            {
                var first = m_ControlPoints[0];
                m_initialTransform = TrTransform.TRS(first.m_Pos, first.m_Orient,
                    Mathf.Approximately(first.m_Pressure, 0f) ? 1f : first.m_Pressure);
            }
            else
            {
                m_initialTransform = TrTransform.identity;
            }
        }

        protected override IEnumerable<ControlPoint> DoGetPoints(TrTransform finalTransform)
        {
            return m_ControlPoints;
        }
    }
}
