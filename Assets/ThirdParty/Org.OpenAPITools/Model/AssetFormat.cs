/*
 * NinjaAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AssetFormat
    /// </summary>
    [DataContract(Name = "AssetFormat")]
    public partial class AssetFormat
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetFormat" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AssetFormat() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetFormat" /> class.
        /// </summary>
        /// <param name="root">root.</param>
        /// <param name="resources">resources.</param>
        /// <param name="formatComplexity">formatComplexity (required).</param>
        /// <param name="formatType">formatType.</param>
        /// <param name="zipArchiveUrl">zipArchiveUrl.</param>
        /// <param name="role">role.</param>
        public AssetFormat(AssetResource root = default(AssetResource), List<AssetResource> resources = default(List<AssetResource>), FormatComplexity formatComplexity = default(FormatComplexity), string formatType = default(string), string zipArchiveUrl = default(string), string role = default(string))
        {
            // to ensure "formatComplexity" is required (not null)
            if (formatComplexity == null)
            {
                throw new ArgumentNullException("formatComplexity is a required property for AssetFormat and cannot be null");
            }
            this.FormatComplexity = formatComplexity;
            this.Root = root;
            this.Resources = resources;
            this.FormatType = formatType;
            this.ZipArchiveUrl = zipArchiveUrl;
            this.Role = role;
        }

        /// <summary>
        /// Gets or Sets Root
        /// </summary>
        [DataMember(Name = "root", EmitDefaultValue = true)]
        public AssetResource Root { get; set; }

        /// <summary>
        /// Gets or Sets Resources
        /// </summary>
        [DataMember(Name = "resources", EmitDefaultValue = true)]
        public List<AssetResource> Resources { get; set; }

        /// <summary>
        /// Gets or Sets FormatComplexity
        /// </summary>
        [DataMember(Name = "formatComplexity", IsRequired = true, EmitDefaultValue = true)]
        public FormatComplexity FormatComplexity { get; set; }

        /// <summary>
        /// Gets or Sets FormatType
        /// </summary>
        [DataMember(Name = "formatType", EmitDefaultValue = false)]
        public string FormatType { get; set; }

        /// <summary>
        /// Gets or Sets ZipArchiveUrl
        /// </summary>
        [DataMember(Name = "zip_archive_url", EmitDefaultValue = true)]
        public string ZipArchiveUrl { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name = "role", EmitDefaultValue = true)]
        public string Role { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetFormat {\n");
            sb.Append("  Root: ").Append(Root).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  FormatComplexity: ").Append(FormatComplexity).Append("\n");
            sb.Append("  FormatType: ").Append(FormatType).Append("\n");
            sb.Append("  ZipArchiveUrl: ").Append(ZipArchiveUrl).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
