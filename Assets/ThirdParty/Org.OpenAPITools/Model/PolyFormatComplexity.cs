/*
 * Icosa API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PolyFormatComplexity
    /// </summary>
    [DataContract(Name = "PolyFormatComplexity")]
    public partial class PolyFormatComplexity : IEquatable<PolyFormatComplexity>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PolyFormatComplexity" /> class.
        /// </summary>
        /// <param name="triangleCount">triangleCount.</param>
        /// <param name="lodHint">lodHint.</param>
        public PolyFormatComplexity(string triangleCount = default(string), int lodHint = default(int))
        {
            this.TriangleCount = triangleCount;
            this.LodHint = lodHint;
        }

        /// <summary>
        /// Gets or Sets TriangleCount
        /// </summary>
        [DataMember(Name = "triangleCount", EmitDefaultValue = false)]
        public string TriangleCount { get; set; }

        /// <summary>
        /// Gets or Sets LodHint
        /// </summary>
        [DataMember(Name = "lodHint", EmitDefaultValue = false)]
        public int LodHint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PolyFormatComplexity {\n");
            sb.Append("  TriangleCount: ").Append(TriangleCount).Append("\n");
            sb.Append("  LodHint: ").Append(LodHint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PolyFormatComplexity);
        }

        /// <summary>
        /// Returns true if PolyFormatComplexity instances are equal
        /// </summary>
        /// <param name="input">Instance of PolyFormatComplexity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolyFormatComplexity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TriangleCount == input.TriangleCount ||
                    (this.TriangleCount != null &&
                    this.TriangleCount.Equals(input.TriangleCount))
                ) && 
                (
                    this.LodHint == input.LodHint ||
                    this.LodHint.Equals(input.LodHint)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TriangleCount != null)
                {
                    hashCode = (hashCode * 59) + this.TriangleCount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LodHint.GetHashCode();
                return hashCode;
            }
        }

    }

}
