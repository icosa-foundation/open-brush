/*
 * NinjaAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserAssetFilters
    /// </summary>
    [DataContract(Name = "UserAssetFilters")]
    public partial class UserAssetFilters
    {

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public Category? Category { get; set; }

        /// <summary>
        /// Gets or Sets OrderBy
        /// </summary>
        [DataMember(Name = "orderBy", EmitDefaultValue = true)]
        public Order? OrderBy { get; set; }

        /// <summary>
        /// Gets or Sets MaxComplexity
        /// </summary>
        [DataMember(Name = "maxComplexity", EmitDefaultValue = true)]
        public Complexity? MaxComplexity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAssetFilters" /> class.
        /// </summary>
        /// <param name="category">category.</param>
        /// <param name="curated">curated (default to false).</param>
        /// <param name="format">format.</param>
        /// <param name="keywords">keywords.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="tag">tag.</param>
        /// <param name="orderBy">orderBy.</param>
        /// <param name="maxComplexity">maxComplexity.</param>
        /// <param name="triangleCountMin">triangleCountMin.</param>
        /// <param name="triangleCountMax">triangleCountMax.</param>
        /// <param name="zipArchiveUrl">zipArchiveUrl.</param>
        /// <param name="visibility">visibility.</param>
        public UserAssetFilters(Category? category = default(Category?), bool curated = false, List<FormatFilter> format = default(List<FormatFilter>), string keywords = default(string), string name = default(string), string description = default(string), List<string> tag = default(List<string>), Order? orderBy = default(Order?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string zipArchiveUrl = default(string), string visibility = default(string))
        {
            this.Category = category;
            this.Curated = curated;
            this.Format = format;
            this.Keywords = keywords;
            this.Name = name;
            this.Description = description;
            this.Tag = tag;
            this.OrderBy = orderBy;
            this.MaxComplexity = maxComplexity;
            this.TriangleCountMin = triangleCountMin;
            this.TriangleCountMax = triangleCountMax;
            this.ZipArchiveUrl = zipArchiveUrl;
            this.Visibility = visibility;
        }

        /// <summary>
        /// Gets or Sets Curated
        /// </summary>
        [DataMember(Name = "curated", EmitDefaultValue = true)]
        public bool Curated { get; set; }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name = "format", EmitDefaultValue = true)]
        public List<FormatFilter> Format { get; set; }

        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name = "keywords", EmitDefaultValue = true)]
        public string Keywords { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name = "tag", EmitDefaultValue = false)]
        public List<string> Tag { get; set; }

        /// <summary>
        /// Gets or Sets TriangleCountMin
        /// </summary>
        [DataMember(Name = "triangleCountMin", EmitDefaultValue = true)]
        public int? TriangleCountMin { get; set; }

        /// <summary>
        /// Gets or Sets TriangleCountMax
        /// </summary>
        [DataMember(Name = "triangleCountMax", EmitDefaultValue = true)]
        public int? TriangleCountMax { get; set; }

        /// <summary>
        /// Gets or Sets ZipArchiveUrl
        /// </summary>
        [DataMember(Name = "zipArchiveUrl", EmitDefaultValue = true)]
        public string ZipArchiveUrl { get; set; }

        /// <summary>
        /// Gets or Sets Visibility
        /// </summary>
        [DataMember(Name = "visibility", EmitDefaultValue = true)]
        public string Visibility { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserAssetFilters {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Curated: ").Append(Curated).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  OrderBy: ").Append(OrderBy).Append("\n");
            sb.Append("  MaxComplexity: ").Append(MaxComplexity).Append("\n");
            sb.Append("  TriangleCountMin: ").Append(TriangleCountMin).Append("\n");
            sb.Append("  TriangleCountMax: ").Append(TriangleCountMax).Append("\n");
            sb.Append("  ZipArchiveUrl: ").Append(ZipArchiveUrl).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
