/*
 * Icosa API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PolyRemixInfo
    /// </summary>
    [DataContract(Name = "PolyRemixInfo")]
    public partial class PolyRemixInfo : IEquatable<PolyRemixInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PolyRemixInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PolyRemixInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PolyRemixInfo" /> class.
        /// </summary>
        /// <param name="sourceAsset">sourceAsset (required).</param>
        public PolyRemixInfo(List<string> sourceAsset = default(List<string>))
        {
            // to ensure "sourceAsset" is required (not null)
            if (sourceAsset == null)
            {
                throw new ArgumentNullException("sourceAsset is a required property for PolyRemixInfo and cannot be null");
            }
            this.SourceAsset = sourceAsset;
        }

        /// <summary>
        /// Gets or Sets SourceAsset
        /// </summary>
        [DataMember(Name = "sourceAsset", IsRequired = true, EmitDefaultValue = true)]
        public List<string> SourceAsset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PolyRemixInfo {\n");
            sb.Append("  SourceAsset: ").Append(SourceAsset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PolyRemixInfo);
        }

        /// <summary>
        /// Returns true if PolyRemixInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PolyRemixInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolyRemixInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SourceAsset == input.SourceAsset ||
                    this.SourceAsset != null &&
                    input.SourceAsset != null &&
                    this.SourceAsset.SequenceEqual(input.SourceAsset)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceAsset != null)
                {
                    hashCode = (hashCode * 59) + this.SourceAsset.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
