/*
 * Icosa API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DeviceCode
    /// </summary>
    [DataContract(Name = "DeviceCode")]
    public partial class DeviceCode : IEquatable<DeviceCode>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceCode" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeviceCode() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceCode" /> class.
        /// </summary>
        /// <param name="varDeviceCode">varDeviceCode (required).</param>
        public DeviceCode(string varDeviceCode = default(string))
        {
            // to ensure "varDeviceCode" is required (not null)
            if (varDeviceCode == null)
            {
                throw new ArgumentNullException("varDeviceCode is a required property for DeviceCode and cannot be null");
            }
            this.VarDeviceCode = varDeviceCode;
        }

        /// <summary>
        /// Gets or Sets VarDeviceCode
        /// </summary>
        [DataMember(Name = "deviceCode", IsRequired = true, EmitDefaultValue = true)]
        public string VarDeviceCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeviceCode {\n");
            sb.Append("  VarDeviceCode: ").Append(VarDeviceCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceCode);
        }

        /// <summary>
        /// Returns true if DeviceCode instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceCode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceCode input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarDeviceCode == input.VarDeviceCode ||
                    (this.VarDeviceCode != null &&
                    this.VarDeviceCode.Equals(input.VarDeviceCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VarDeviceCode != null)
                {
                    hashCode = (hashCode * 59) + this.VarDeviceCode.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
