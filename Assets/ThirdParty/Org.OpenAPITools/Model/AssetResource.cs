/*
 * NinjaAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AssetResource
    /// </summary>
    [DataContract(Name = "AssetResource")]
    public partial class AssetResource
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AssetResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetResource" /> class.
        /// </summary>
        /// <param name="relativePath">relativePath (required).</param>
        /// <param name="contentType">contentType (required).</param>
        /// <param name="url">url (required).</param>
        public AssetResource(string relativePath = default(string), string contentType = default(string), string url = default(string))
        {
            // to ensure "relativePath" is required (not null)
            if (relativePath == null)
            {
                throw new ArgumentNullException("relativePath is a required property for AssetResource and cannot be null");
            }
            this.RelativePath = relativePath;
            // to ensure "contentType" is required (not null)
            if (contentType == null)
            {
                throw new ArgumentNullException("contentType is a required property for AssetResource and cannot be null");
            }
            this.ContentType = contentType;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for AssetResource and cannot be null");
            }
            this.Url = url;
        }

        /// <summary>
        /// Gets or Sets RelativePath
        /// </summary>
        [DataMember(Name = "relativePath", IsRequired = true, EmitDefaultValue = true)]
        public string RelativePath { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name = "contentType", IsRequired = true, EmitDefaultValue = true)]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetResource {\n");
            sb.Append("  RelativePath: ").Append(RelativePath).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
