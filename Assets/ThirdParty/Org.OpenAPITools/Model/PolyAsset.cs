/*
 * Icosa API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PolyAsset
    /// </summary>
    [DataContract(Name = "PolyAsset")]
    public partial class PolyAsset : IEquatable<PolyAsset>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PolyAsset" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PolyAsset() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PolyAsset" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="displayName">displayName (required).</param>
        /// <param name="authorName">authorName (required).</param>
        /// <param name="description">description.</param>
        /// <param name="createTime">createTime (required).</param>
        /// <param name="updateTime">updateTime (required).</param>
        /// <param name="formats">formats (required).</param>
        /// <param name="thumbnail">thumbnail.</param>
        /// <param name="licence">licence.</param>
        /// <param name="visibility">visibility (required).</param>
        /// <param name="isCurated">isCurated.</param>
        /// <param name="presentationParams">presentationParams.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="remixInfo">remixInfo.</param>
        public PolyAsset(string name = default(string), string displayName = default(string), string authorName = default(string), string description = default(string), string createTime = default(string), string updateTime = default(string), List<PolyFormat> formats = default(List<PolyFormat>), PolyResource thumbnail = default(PolyResource), string licence = default(string), string visibility = default(string), bool isCurated = default(bool), PolyPresentationParams presentationParams = default(PolyPresentationParams), string metadata = default(string), PolyRemixInfo remixInfo = default(PolyRemixInfo))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for PolyAsset and cannot be null");
            }
            this.Name = name;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for PolyAsset and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "authorName" is required (not null)
            if (authorName == null)
            {
                throw new ArgumentNullException("authorName is a required property for PolyAsset and cannot be null");
            }
            this.AuthorName = authorName;
            // to ensure "createTime" is required (not null)
            if (createTime == null)
            {
                throw new ArgumentNullException("createTime is a required property for PolyAsset and cannot be null");
            }
            this.CreateTime = createTime;
            // to ensure "updateTime" is required (not null)
            if (updateTime == null)
            {
                throw new ArgumentNullException("updateTime is a required property for PolyAsset and cannot be null");
            }
            this.UpdateTime = updateTime;
            // to ensure "formats" is required (not null)
            if (formats == null)
            {
                throw new ArgumentNullException("formats is a required property for PolyAsset and cannot be null");
            }
            this.Formats = formats;
            // to ensure "visibility" is required (not null)
            if (visibility == null)
            {
                throw new ArgumentNullException("visibility is a required property for PolyAsset and cannot be null");
            }
            this.Visibility = visibility;
            this.Description = description;
            this.Thumbnail = thumbnail;
            this.Licence = licence;
            this.IsCurated = isCurated;
            this.PresentationParams = presentationParams;
            this.Metadata = metadata;
            this.RemixInfo = remixInfo;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets AuthorName
        /// </summary>
        [DataMember(Name = "authorName", IsRequired = true, EmitDefaultValue = true)]
        public string AuthorName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CreateTime
        /// </summary>
        [DataMember(Name = "createTime", IsRequired = true, EmitDefaultValue = true)]
        public string CreateTime { get; set; }

        /// <summary>
        /// Gets or Sets UpdateTime
        /// </summary>
        [DataMember(Name = "updateTime", IsRequired = true, EmitDefaultValue = true)]
        public string UpdateTime { get; set; }

        /// <summary>
        /// Gets or Sets Formats
        /// </summary>
        [DataMember(Name = "formats", IsRequired = true, EmitDefaultValue = true)]
        public List<PolyFormat> Formats { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnail
        /// </summary>
        [DataMember(Name = "thumbnail", EmitDefaultValue = false)]
        public PolyResource Thumbnail { get; set; }

        /// <summary>
        /// Gets or Sets Licence
        /// </summary>
        [DataMember(Name = "licence", EmitDefaultValue = false)]
        public string Licence { get; set; }

        /// <summary>
        /// Gets or Sets Visibility
        /// </summary>
        [DataMember(Name = "visibility", IsRequired = true, EmitDefaultValue = true)]
        public string Visibility { get; set; }

        /// <summary>
        /// Gets or Sets IsCurated
        /// </summary>
        [DataMember(Name = "isCurated", EmitDefaultValue = true)]
        public bool IsCurated { get; set; }

        /// <summary>
        /// Gets or Sets PresentationParams
        /// </summary>
        [DataMember(Name = "presentationParams", EmitDefaultValue = false)]
        public PolyPresentationParams PresentationParams { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Gets or Sets RemixInfo
        /// </summary>
        [DataMember(Name = "remixInfo", EmitDefaultValue = false)]
        public PolyRemixInfo RemixInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PolyAsset {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  AuthorName: ").Append(AuthorName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("  Formats: ").Append(Formats).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("  Licence: ").Append(Licence).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  IsCurated: ").Append(IsCurated).Append("\n");
            sb.Append("  PresentationParams: ").Append(PresentationParams).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  RemixInfo: ").Append(RemixInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PolyAsset);
        }

        /// <summary>
        /// Returns true if PolyAsset instances are equal
        /// </summary>
        /// <param name="input">Instance of PolyAsset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolyAsset input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.AuthorName == input.AuthorName ||
                    (this.AuthorName != null &&
                    this.AuthorName.Equals(input.AuthorName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CreateTime == input.CreateTime ||
                    (this.CreateTime != null &&
                    this.CreateTime.Equals(input.CreateTime))
                ) && 
                (
                    this.UpdateTime == input.UpdateTime ||
                    (this.UpdateTime != null &&
                    this.UpdateTime.Equals(input.UpdateTime))
                ) && 
                (
                    this.Formats == input.Formats ||
                    this.Formats != null &&
                    input.Formats != null &&
                    this.Formats.SequenceEqual(input.Formats)
                ) && 
                (
                    this.Thumbnail == input.Thumbnail ||
                    (this.Thumbnail != null &&
                    this.Thumbnail.Equals(input.Thumbnail))
                ) && 
                (
                    this.Licence == input.Licence ||
                    (this.Licence != null &&
                    this.Licence.Equals(input.Licence))
                ) && 
                (
                    this.Visibility == input.Visibility ||
                    (this.Visibility != null &&
                    this.Visibility.Equals(input.Visibility))
                ) && 
                (
                    this.IsCurated == input.IsCurated ||
                    this.IsCurated.Equals(input.IsCurated)
                ) && 
                (
                    this.PresentationParams == input.PresentationParams ||
                    (this.PresentationParams != null &&
                    this.PresentationParams.Equals(input.PresentationParams))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.RemixInfo == input.RemixInfo ||
                    (this.RemixInfo != null &&
                    this.RemixInfo.Equals(input.RemixInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.AuthorName != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.CreateTime != null)
                {
                    hashCode = (hashCode * 59) + this.CreateTime.GetHashCode();
                }
                if (this.UpdateTime != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateTime.GetHashCode();
                }
                if (this.Formats != null)
                {
                    hashCode = (hashCode * 59) + this.Formats.GetHashCode();
                }
                if (this.Thumbnail != null)
                {
                    hashCode = (hashCode * 59) + this.Thumbnail.GetHashCode();
                }
                if (this.Licence != null)
                {
                    hashCode = (hashCode * 59) + this.Licence.GetHashCode();
                }
                if (this.Visibility != null)
                {
                    hashCode = (hashCode * 59) + this.Visibility.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsCurated.GetHashCode();
                if (this.PresentationParams != null)
                {
                    hashCode = (hashCode * 59) + this.PresentationParams.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.RemixInfo != null)
                {
                    hashCode = (hashCode * 59) + this.RemixInfo.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
