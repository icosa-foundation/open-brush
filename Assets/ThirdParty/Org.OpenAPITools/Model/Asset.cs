/*
 * Icosa API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Asset
    /// </summary>
    [DataContract(Name = "Asset")]
    public partial class Asset : IEquatable<Asset>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Asset" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Asset() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Asset" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="url">url.</param>
        /// <param name="formats">formats (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="owner">owner (required).</param>
        /// <param name="visibility">visibility (required).</param>
        /// <param name="curated">curated.</param>
        /// <param name="polyid">polyid.</param>
        /// <param name="polydata">polydata.</param>
        /// <param name="thumbnail">thumbnail.</param>
        /// <param name="ownername">ownername (required).</param>
        /// <param name="ownerurl">ownerurl (required).</param>
        public Asset(string id = default(string), string url = default(string), List<AssetFormat> formats = default(List<AssetFormat>), string name = default(string), string description = default(string), string owner = default(string), string visibility = default(string), bool curated = default(bool), string polyid = default(string), PolyAsset polydata = default(PolyAsset), string thumbnail = default(string), string ownername = default(string), string ownerurl = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Asset and cannot be null");
            }
            this.Id = id;
            // to ensure "formats" is required (not null)
            if (formats == null)
            {
                throw new ArgumentNullException("formats is a required property for Asset and cannot be null");
            }
            this.Formats = formats;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Asset and cannot be null");
            }
            this.Name = name;
            // to ensure "owner" is required (not null)
            if (owner == null)
            {
                throw new ArgumentNullException("owner is a required property for Asset and cannot be null");
            }
            this.Owner = owner;
            // to ensure "visibility" is required (not null)
            if (visibility == null)
            {
                throw new ArgumentNullException("visibility is a required property for Asset and cannot be null");
            }
            this.Visibility = visibility;
            // to ensure "ownername" is required (not null)
            if (ownername == null)
            {
                throw new ArgumentNullException("ownername is a required property for Asset and cannot be null");
            }
            this.Ownername = ownername;
            // to ensure "ownerurl" is required (not null)
            if (ownerurl == null)
            {
                throw new ArgumentNullException("ownerurl is a required property for Asset and cannot be null");
            }
            this.Ownerurl = ownerurl;
            this.Url = url;
            this.Description = description;
            this.Curated = curated;
            this.Polyid = polyid;
            this.Polydata = polydata;
            this.Thumbnail = thumbnail;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Formats
        /// </summary>
        [DataMember(Name = "formats", IsRequired = true, EmitDefaultValue = true)]
        public List<AssetFormat> Formats { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "owner", IsRequired = true, EmitDefaultValue = true)]
        public string Owner { get; set; }

        /// <summary>
        /// Gets or Sets Visibility
        /// </summary>
        [DataMember(Name = "visibility", IsRequired = true, EmitDefaultValue = true)]
        public string Visibility { get; set; }

        /// <summary>
        /// Gets or Sets Curated
        /// </summary>
        [DataMember(Name = "curated", EmitDefaultValue = true)]
        public bool Curated { get; set; }

        /// <summary>
        /// Gets or Sets Polyid
        /// </summary>
        [DataMember(Name = "polyid", EmitDefaultValue = false)]
        public string Polyid { get; set; }

        /// <summary>
        /// Gets or Sets Polydata
        /// </summary>
        [DataMember(Name = "polydata", EmitDefaultValue = false)]
        public PolyAsset Polydata { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnail
        /// </summary>
        [DataMember(Name = "thumbnail", EmitDefaultValue = false)]
        public string Thumbnail { get; set; }

        /// <summary>
        /// Gets or Sets Ownername
        /// </summary>
        [DataMember(Name = "ownername", IsRequired = true, EmitDefaultValue = true)]
        public string Ownername { get; set; }

        /// <summary>
        /// Gets or Sets Ownerurl
        /// </summary>
        [DataMember(Name = "ownerurl", IsRequired = true, EmitDefaultValue = true)]
        public string Ownerurl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Asset {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Formats: ").Append(Formats).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  Curated: ").Append(Curated).Append("\n");
            sb.Append("  Polyid: ").Append(Polyid).Append("\n");
            sb.Append("  Polydata: ").Append(Polydata).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("  Ownername: ").Append(Ownername).Append("\n");
            sb.Append("  Ownerurl: ").Append(Ownerurl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Asset);
        }

        /// <summary>
        /// Returns true if Asset instances are equal
        /// </summary>
        /// <param name="input">Instance of Asset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Asset input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Formats == input.Formats ||
                    this.Formats != null &&
                    input.Formats != null &&
                    this.Formats.SequenceEqual(input.Formats)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.Visibility == input.Visibility ||
                    (this.Visibility != null &&
                    this.Visibility.Equals(input.Visibility))
                ) && 
                (
                    this.Curated == input.Curated ||
                    this.Curated.Equals(input.Curated)
                ) && 
                (
                    this.Polyid == input.Polyid ||
                    (this.Polyid != null &&
                    this.Polyid.Equals(input.Polyid))
                ) && 
                (
                    this.Polydata == input.Polydata ||
                    (this.Polydata != null &&
                    this.Polydata.Equals(input.Polydata))
                ) && 
                (
                    this.Thumbnail == input.Thumbnail ||
                    (this.Thumbnail != null &&
                    this.Thumbnail.Equals(input.Thumbnail))
                ) && 
                (
                    this.Ownername == input.Ownername ||
                    (this.Ownername != null &&
                    this.Ownername.Equals(input.Ownername))
                ) && 
                (
                    this.Ownerurl == input.Ownerurl ||
                    (this.Ownerurl != null &&
                    this.Ownerurl.Equals(input.Ownerurl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.Formats != null)
                {
                    hashCode = (hashCode * 59) + this.Formats.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Owner != null)
                {
                    hashCode = (hashCode * 59) + this.Owner.GetHashCode();
                }
                if (this.Visibility != null)
                {
                    hashCode = (hashCode * 59) + this.Visibility.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Curated.GetHashCode();
                if (this.Polyid != null)
                {
                    hashCode = (hashCode * 59) + this.Polyid.GetHashCode();
                }
                if (this.Polydata != null)
                {
                    hashCode = (hashCode * 59) + this.Polydata.GetHashCode();
                }
                if (this.Thumbnail != null)
                {
                    hashCode = (hashCode * 59) + this.Thumbnail.GetHashCode();
                }
                if (this.Ownername != null)
                {
                    hashCode = (hashCode * 59) + this.Ownername.GetHashCode();
                }
                if (this.Ownerurl != null)
                {
                    hashCode = (hashCode * 59) + this.Ownerurl.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
