/*
 * Icosa API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PolyFormat
    /// </summary>
    [DataContract(Name = "PolyFormat")]
    public partial class PolyFormat : IEquatable<PolyFormat>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PolyFormat" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PolyFormat() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PolyFormat" /> class.
        /// </summary>
        /// <param name="root">root (required).</param>
        /// <param name="resources">resources.</param>
        /// <param name="formatComplexity">formatComplexity (required).</param>
        /// <param name="formatType">formatType (required).</param>
        public PolyFormat(PolyResource root = default(PolyResource), List<PolyResource> resources = default(List<PolyResource>), PolyFormatComplexity formatComplexity = default(PolyFormatComplexity), string formatType = default(string))
        {
            // to ensure "root" is required (not null)
            if (root == null)
            {
                throw new ArgumentNullException("root is a required property for PolyFormat and cannot be null");
            }
            this.Root = root;
            // to ensure "formatComplexity" is required (not null)
            if (formatComplexity == null)
            {
                throw new ArgumentNullException("formatComplexity is a required property for PolyFormat and cannot be null");
            }
            this.FormatComplexity = formatComplexity;
            // to ensure "formatType" is required (not null)
            if (formatType == null)
            {
                throw new ArgumentNullException("formatType is a required property for PolyFormat and cannot be null");
            }
            this.FormatType = formatType;
            this.Resources = resources;
        }

        /// <summary>
        /// Gets or Sets Root
        /// </summary>
        [DataMember(Name = "root", IsRequired = true, EmitDefaultValue = true)]
        public PolyResource Root { get; set; }

        /// <summary>
        /// Gets or Sets Resources
        /// </summary>
        [DataMember(Name = "resources", EmitDefaultValue = false)]
        public List<PolyResource> Resources { get; set; }

        /// <summary>
        /// Gets or Sets FormatComplexity
        /// </summary>
        [DataMember(Name = "formatComplexity", IsRequired = true, EmitDefaultValue = true)]
        public PolyFormatComplexity FormatComplexity { get; set; }

        /// <summary>
        /// Gets or Sets FormatType
        /// </summary>
        [DataMember(Name = "formatType", IsRequired = true, EmitDefaultValue = true)]
        public string FormatType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PolyFormat {\n");
            sb.Append("  Root: ").Append(Root).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  FormatComplexity: ").Append(FormatComplexity).Append("\n");
            sb.Append("  FormatType: ").Append(FormatType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PolyFormat);
        }

        /// <summary>
        /// Returns true if PolyFormat instances are equal
        /// </summary>
        /// <param name="input">Instance of PolyFormat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolyFormat input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Root == input.Root ||
                    (this.Root != null &&
                    this.Root.Equals(input.Root))
                ) && 
                (
                    this.Resources == input.Resources ||
                    this.Resources != null &&
                    input.Resources != null &&
                    this.Resources.SequenceEqual(input.Resources)
                ) && 
                (
                    this.FormatComplexity == input.FormatComplexity ||
                    (this.FormatComplexity != null &&
                    this.FormatComplexity.Equals(input.FormatComplexity))
                ) && 
                (
                    this.FormatType == input.FormatType ||
                    (this.FormatType != null &&
                    this.FormatType.Equals(input.FormatType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Root != null)
                {
                    hashCode = (hashCode * 59) + this.Root.GetHashCode();
                }
                if (this.Resources != null)
                {
                    hashCode = (hashCode * 59) + this.Resources.GetHashCode();
                }
                if (this.FormatComplexity != null)
                {
                    hashCode = (hashCode * 59) + this.FormatComplexity.GetHashCode();
                }
                if (this.FormatType != null)
                {
                    hashCode = (hashCode * 59) + this.FormatType.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
