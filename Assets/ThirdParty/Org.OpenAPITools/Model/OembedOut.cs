/*
 * NinjaAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OembedOut
    /// </summary>
    [DataContract(Name = "OembedOut")]
    public partial class OembedOut
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Rich for value: rich
            /// </summary>
            [EnumMember(Value = "rich")]
            Rich = 1
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Defines VarVersion
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VarVersionEnum
        {
            /// <summary>
            /// Enum _10 for value: 1.0
            /// </summary>
            [EnumMember(Value = "1.0")]
            _10 = 1
        }


        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public VarVersionEnum VarVersion { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OembedOut" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OembedOut() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OembedOut" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="varVersion">varVersion (required).</param>
        /// <param name="title">title.</param>
        /// <param name="authorName">authorName.</param>
        /// <param name="authorUrl">authorUrl.</param>
        /// <param name="providerName">providerName.</param>
        /// <param name="providerUrl">providerUrl.</param>
        /// <param name="cacheAge">cacheAge.</param>
        /// <param name="thumbnailUrl">thumbnailUrl.</param>
        /// <param name="thumbnailWidth">thumbnailWidth.</param>
        /// <param name="thumbnailHeight">thumbnailHeight.</param>
        /// <param name="html">html (required).</param>
        /// <param name="width">width (required).</param>
        /// <param name="height">height (required).</param>
        public OembedOut(TypeEnum type = default(TypeEnum), VarVersionEnum varVersion = default(VarVersionEnum), string title = default(string), string authorName = default(string), string authorUrl = default(string), string providerName = default(string), string providerUrl = default(string), string cacheAge = default(string), string thumbnailUrl = default(string), string thumbnailWidth = default(string), string thumbnailHeight = default(string), string html = default(string), int width = default(int), int height = default(int))
        {
            this.Type = type;
            this.VarVersion = varVersion;
            // to ensure "html" is required (not null)
            if (html == null)
            {
                throw new ArgumentNullException("html is a required property for OembedOut and cannot be null");
            }
            this.Html = html;
            this.Width = width;
            this.Height = height;
            this.Title = title;
            this.AuthorName = authorName;
            this.AuthorUrl = authorUrl;
            this.ProviderName = providerName;
            this.ProviderUrl = providerUrl;
            this.CacheAge = cacheAge;
            this.ThumbnailUrl = thumbnailUrl;
            this.ThumbnailWidth = thumbnailWidth;
            this.ThumbnailHeight = thumbnailHeight;
        }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets AuthorName
        /// </summary>
        [DataMember(Name = "author_name", EmitDefaultValue = true)]
        public string AuthorName { get; set; }

        /// <summary>
        /// Gets or Sets AuthorUrl
        /// </summary>
        [DataMember(Name = "author_url", EmitDefaultValue = true)]
        public string AuthorUrl { get; set; }

        /// <summary>
        /// Gets or Sets ProviderName
        /// </summary>
        [DataMember(Name = "provider_name", EmitDefaultValue = true)]
        public string ProviderName { get; set; }

        /// <summary>
        /// Gets or Sets ProviderUrl
        /// </summary>
        [DataMember(Name = "provider_url", EmitDefaultValue = true)]
        public string ProviderUrl { get; set; }

        /// <summary>
        /// Gets or Sets CacheAge
        /// </summary>
        [DataMember(Name = "cache_age", EmitDefaultValue = true)]
        public string CacheAge { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailUrl
        /// </summary>
        [DataMember(Name = "thumbnail_url", EmitDefaultValue = true)]
        public string ThumbnailUrl { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailWidth
        /// </summary>
        [DataMember(Name = "thumbnail_width", EmitDefaultValue = true)]
        public string ThumbnailWidth { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailHeight
        /// </summary>
        [DataMember(Name = "thumbnail_height", EmitDefaultValue = true)]
        public string ThumbnailHeight { get; set; }

        /// <summary>
        /// Gets or Sets Html
        /// </summary>
        [DataMember(Name = "html", IsRequired = true, EmitDefaultValue = true)]
        public string Html { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name = "width", IsRequired = true, EmitDefaultValue = true)]
        public int Width { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name = "height", IsRequired = true, EmitDefaultValue = true)]
        public int Height { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OembedOut {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  AuthorName: ").Append(AuthorName).Append("\n");
            sb.Append("  AuthorUrl: ").Append(AuthorUrl).Append("\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  ProviderUrl: ").Append(ProviderUrl).Append("\n");
            sb.Append("  CacheAge: ").Append(CacheAge).Append("\n");
            sb.Append("  ThumbnailUrl: ").Append(ThumbnailUrl).Append("\n");
            sb.Append("  ThumbnailWidth: ").Append(ThumbnailWidth).Append("\n");
            sb.Append("  ThumbnailHeight: ").Append(ThumbnailHeight).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
