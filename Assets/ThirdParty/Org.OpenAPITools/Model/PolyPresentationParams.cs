/*
 * Icosa API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PolyPresentationParams
    /// </summary>
    [DataContract(Name = "PolyPresentationParams")]
    public partial class PolyPresentationParams : IEquatable<PolyPresentationParams>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PolyPresentationParams" /> class.
        /// </summary>
        /// <param name="orientingRotation">orientingRotation.</param>
        /// <param name="colorSpace">colorSpace.</param>
        /// <param name="backgroundColor">backgroundColor.</param>
        public PolyPresentationParams(PolyQuaternion orientingRotation = default(PolyQuaternion), string colorSpace = default(string), string backgroundColor = default(string))
        {
            this.OrientingRotation = orientingRotation;
            this.ColorSpace = colorSpace;
            this.BackgroundColor = backgroundColor;
        }

        /// <summary>
        /// Gets or Sets OrientingRotation
        /// </summary>
        [DataMember(Name = "orientingRotation", EmitDefaultValue = false)]
        public PolyQuaternion OrientingRotation { get; set; }

        /// <summary>
        /// Gets or Sets ColorSpace
        /// </summary>
        [DataMember(Name = "colorSpace", EmitDefaultValue = false)]
        public string ColorSpace { get; set; }

        /// <summary>
        /// Gets or Sets BackgroundColor
        /// </summary>
        [DataMember(Name = "backgroundColor", EmitDefaultValue = false)]
        public string BackgroundColor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PolyPresentationParams {\n");
            sb.Append("  OrientingRotation: ").Append(OrientingRotation).Append("\n");
            sb.Append("  ColorSpace: ").Append(ColorSpace).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PolyPresentationParams);
        }

        /// <summary>
        /// Returns true if PolyPresentationParams instances are equal
        /// </summary>
        /// <param name="input">Instance of PolyPresentationParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolyPresentationParams input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrientingRotation == input.OrientingRotation ||
                    (this.OrientingRotation != null &&
                    this.OrientingRotation.Equals(input.OrientingRotation))
                ) && 
                (
                    this.ColorSpace == input.ColorSpace ||
                    (this.ColorSpace != null &&
                    this.ColorSpace.Equals(input.ColorSpace))
                ) && 
                (
                    this.BackgroundColor == input.BackgroundColor ||
                    (this.BackgroundColor != null &&
                    this.BackgroundColor.Equals(input.BackgroundColor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrientingRotation != null)
                {
                    hashCode = (hashCode * 59) + this.OrientingRotation.GetHashCode();
                }
                if (this.ColorSpace != null)
                {
                    hashCode = (hashCode * 59) + this.ColorSpace.GetHashCode();
                }
                if (this.BackgroundColor != null)
                {
                    hashCode = (hashCode * 59) + this.BackgroundColor.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
