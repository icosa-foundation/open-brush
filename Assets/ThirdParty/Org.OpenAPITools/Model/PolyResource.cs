/*
 * Icosa API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PolyResource
    /// </summary>
    [DataContract(Name = "PolyResource")]
    public partial class PolyResource : IEquatable<PolyResource>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PolyResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PolyResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PolyResource" /> class.
        /// </summary>
        /// <param name="relativePath">relativePath (required).</param>
        /// <param name="url">url (required).</param>
        /// <param name="contentType">contentType (required).</param>
        public PolyResource(string relativePath = default(string), string url = default(string), string contentType = default(string))
        {
            // to ensure "relativePath" is required (not null)
            if (relativePath == null)
            {
                throw new ArgumentNullException("relativePath is a required property for PolyResource and cannot be null");
            }
            this.RelativePath = relativePath;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for PolyResource and cannot be null");
            }
            this.Url = url;
            // to ensure "contentType" is required (not null)
            if (contentType == null)
            {
                throw new ArgumentNullException("contentType is a required property for PolyResource and cannot be null");
            }
            this.ContentType = contentType;
        }

        /// <summary>
        /// Gets or Sets RelativePath
        /// </summary>
        [DataMember(Name = "relativePath", IsRequired = true, EmitDefaultValue = true)]
        public string RelativePath { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name = "contentType", IsRequired = true, EmitDefaultValue = true)]
        public string ContentType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PolyResource {\n");
            sb.Append("  RelativePath: ").Append(RelativePath).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PolyResource);
        }

        /// <summary>
        /// Returns true if PolyResource instances are equal
        /// </summary>
        /// <param name="input">Instance of PolyResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolyResource input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RelativePath == input.RelativePath ||
                    (this.RelativePath != null &&
                    this.RelativePath.Equals(input.RelativePath))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RelativePath != null)
                {
                    hashCode = (hashCode * 59) + this.RelativePath.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.ContentType != null)
                {
                    hashCode = (hashCode * 59) + this.ContentType.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
