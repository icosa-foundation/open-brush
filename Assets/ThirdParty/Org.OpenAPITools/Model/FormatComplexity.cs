/*
 * NinjaAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FormatComplexity
    /// </summary>
    [DataContract(Name = "FormatComplexity")]
    public partial class FormatComplexity
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FormatComplexity" /> class.
        /// </summary>
        /// <param name="triangleCount">triangleCount.</param>
        /// <param name="lodHint">lodHint.</param>
        public FormatComplexity(int? triangleCount = default(int?), int? lodHint = default(int?))
        {
            this.TriangleCount = triangleCount;
            this.LodHint = lodHint;
        }

        /// <summary>
        /// Gets or Sets TriangleCount
        /// </summary>
        [DataMember(Name = "triangleCount", EmitDefaultValue = true)]
        public int? TriangleCount { get; set; }

        /// <summary>
        /// Gets or Sets LodHint
        /// </summary>
        [DataMember(Name = "lodHint", EmitDefaultValue = true)]
        public int? LodHint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FormatComplexity {\n");
            sb.Append("  TriangleCount: ").Append(TriangleCount).Append("\n");
            sb.Append("  LodHint: ").Append(LodHint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
