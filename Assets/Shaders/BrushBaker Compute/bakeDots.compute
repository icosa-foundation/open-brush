#pragma kernel CSMain

uniform float4x4 TransformObjectToWorld;

RWStructuredBuffer<float3> vertexBuffer;
StructuredBuffer<float3> normalBuffer;
StructuredBuffer<float4> colorBuffer;
StructuredBuffer<float3> uvBuffer;
StructuredBuffer<float4> uv1Buffer;

float _SqueezeAmount;

static const float kRecipSquareRootOfTwo = 0.70710678;

[numthreads(8, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    float3 vertex = vertexBuffer[id.x];
    float3 uv0 = uvBuffer[id.x];
    float4 uv1 = uv1Buffer[id.x];

    float4 originWS = mul(TransformObjectToWorld, float4(uv1.xyz, 1.0));
    float4 posWS = mul(TransformObjectToWorld, float4(vertex, 1.0));
    float length = distance(originWS.xyz, posWS.xyz);
    length *= kRecipSquareRootOfTwo;

    // if (uv0.x + uv0.y == 0) then (-length, -length, 0)
    // if (uv0.x + uv0.y == 2) then (length, length, 0)
    // if (uv0.x + uv0.y == 1 && uv0.x - uv0.y == -1) then (length, -length, 0)
    // if (uv0.x + uv0.y == 1 && uv0.x - uv0.y == 1) then (-length, length, 0)

    float uv0Sum = uv0.x + uv0.y;
    float uv0Dif = uv0.x - uv0.y;

    float3 preBillboard = float3(-length, length, 0);

    if (uv0Sum == 0)
    {
        preBillboard = float3(-length, -length, 0);
    }
    else if (uv0Sum == 2)
    {
        preBillboard = float3(length, length, 0);
    }
    else if (uv0Dif == -1)
    {
        preBillboard = float3(length, -length, 0);
    }

    vertex = originWS.xyz + preBillboard;
    vertexBuffer[id.x] = vertex;
}
