#pragma kernel CSMain

#include "../../../ThirdParty/Shaders/Noise.cginc"

uniform float4x4 TransformObjectToWorld;
uniform float4x4 TransformWorldToObject;

RWStructuredBuffer<float3> vertexBuffer;
StructuredBuffer<float3> normalBuffer;
StructuredBuffer<float4> colorBuffer;
StructuredBuffer<float3> uvBuffer;
StructuredBuffer<float4> uv1Buffer;

float _SqueezeAmount;

[numthreads(8, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    float3 vertex = vertexBuffer[id.x];
    float3 normal = normalBuffer[id.x];
    float4 color = colorBuffer[id.x];
    float3 uv0 = uvBuffer[id.x];
    float4 uv1 = uv1Buffer[id.x];

    // the movement is based on Unity Built-in shader variables
    // _Time.y (t)
    // we will take the t = 0 in this compute shader
    float timedoty = 0;

    float4 posWS = mul(TransformObjectToWorld, float4(vertex, 1.0));
    float3 perVertOffset = uv1.xyz;
    float lifetime = timedoty - uv1.w;
    float release = saturate(lifetime * .1);
    float3 localMidpointPos = vertex.xyz - perVertOffset;
    float4 worldMidpointPos = mul(TransformObjectToWorld, localMidpointPos);

    float time = lifetime;
    float d = 10 + color.g * 3;
    float freq = 1.5 + color.r;
    float3 disp = float3(1,0,0) * curlX(worldMidpointPos.xyz * freq + time, d);
    disp += float3(0,1,0) * curlY(worldMidpointPos.xyz * freq +time, d);
    disp += float3(0,0,1) * curlZ(worldMidpointPos.xyz * freq + time, d);

    worldMidpointPos.xyz += release * disp * 10;
    posWS.xyz = worldMidpointPos.xyz + perVertOffset;

    float4 posOS = mul(TransformWorldToObject, posWS);
    vertex = posOS.xyz;

    vertexBuffer[id.x] = vertex;
}
