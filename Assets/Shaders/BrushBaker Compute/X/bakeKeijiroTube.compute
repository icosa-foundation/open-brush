#pragma kernel CSMain

uniform float4x4 TransformObjectToWorld;

RWStructuredBuffer<float3> vertexBuffer;
StructuredBuffer<float3> normalBuffer;
StructuredBuffer<float4> colorBuffer;
StructuredBuffer<float3> uvBuffer;

float _SqueezeAmount;

[numthreads(8, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    float3 vertex = vertexBuffer[id.x];
    float3 normal = normalBuffer[id.x];
    float3 uv0 = uvBuffer[id.x];

    float radius = uv0.z;

    // the movement is based on Unity Built-in shader variables
    // _Time.y (t) and _Time.z (t * 2)
    // we will take the t = 1 in this compute shader

    // this is a little bit different
    // _Time.z is used to create a building effect on the mesh
    // so I have set the time to be 1.0 so the mesh is build finished
    // in the future, this brush have to interpolate from 0 to 1
    // in order to rebuild the building effect

    float timedoty = 1;
    float timedotz = timedoty * 2;

    float wave = sin(uv0.x - timedotz);
    float pulse = smoothstep(.45, .5, saturate(wave));
    vertex -= pulse * radius * normal.xyz;

    vertexBuffer[id.x] = vertex;
}
