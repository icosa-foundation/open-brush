#pragma kernel CSMain

#include "../../../ThirdParty/Shaders/Noise.cginc"

uniform float4x4 TransformObjectToWorld;

RWStructuredBuffer<float3> vertexBuffer;
StructuredBuffer<float3> normalBuffer;
StructuredBuffer<float4> colorBuffer;
StructuredBuffer<float3> uvBuffer;

float _SqueezeAmount;

[numthreads(8, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    float3 vertex = vertexBuffer[id.x];
    float3 normal = normalBuffer[id.x];
    float3 uv0 = uvBuffer[id.x];

    float radius = uv0.z;

    // Bulge displacement
    float wave = sin(uv0.x*3.14159);
    float3 wave_displacement = radius * normal.xyz * wave;
    vertex += wave_displacement;

    // the movement is based on Unity Built-in shader variables
    // _Time.y (t)
    // we will take the t = 0 in this compute shader
    // float timedoty = 0;
    // float timedotx = timedoty / 20;;


    // // // leaving this parameters here for generating animated mesh in the future
    // float scrollRate = -0.54f;
    // float scrollJitterIntensity = 3.0f;
    // float scrollJitterFrequency = 1.0f;
    // float timeOffset = 0;
    // float t = timedoty * scrollRate + timeOffset;
    // float3 pos = vertex.xyz;
    // pos.x += sin(t + timedoty + pos.z * scrollJitterFrequency) * scrollJitterIntensity;
    // pos.z += cos(t + timedoty + pos.x * scrollJitterFrequency) * scrollJitterIntensity;
    // pos.y += cos(t * 1.2 + timedoty + pos.x * scrollJitterFrequency) * scrollJitterIntensity;

    // float time = timedotx;
    // float d = 30;
    // float freq = .1;

    // float3 disp = float3(1,0,0) * curlX(pos.xyz * freq + time, d);
    // disp += float3(0,1,0) * curlY(pos.xyz * freq +time, d);
    // disp += float3(0,0,1) * curlZ(pos.xyz * freq + time, d);
    // pos.xyz = scrollJitterIntensity * disp;

    // // Noise displacement
    // // TO DO: Need to make this scale invariant
    // float4 displacement = float4(pos, 0);
    // vertex += displacement.xyz;

    // // Perturb normal
    // normal = normalize(normal + displacement.xyz * 2.5, wave_displacement * 2.5);


    vertexBuffer[id.x] = vertex;
}
