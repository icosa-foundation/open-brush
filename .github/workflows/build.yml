# yamllint disable rule:line-length
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
---
name: Builds

on:  # yamllint disable-line rule:truthy
  pull_request: {}
  push:
    branches:
      - "**"
    tags:
      - "v*"

env:
  UNITY_VERSION: "2021.3.16f1"
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
  # If UNITY_SERIAL is not set, then use a hardcoded license. Otherwise, don't set this, so the game-ci actions will use EMAIL/PASS/SERIAL
  UNITY_LICENSE: ${{ fromJSON('["<?xml version=\"1.0\" encoding=\"UTF-8\"?><root>\n    <License id=\"Terms\">\n        <MachineBindings>\n            <Binding Key=\"1\" Value=\"576562626572264761624c65526f7578\"/>\n            <Binding Key=\"2\" Value=\"576562626572264761624c65526f7578\"/>\n        </MachineBindings>\n        <MachineID Value=\"D7nTUnjNAmtsUMcnoyrqkgIbYdM=\"/>\n        <SerialHash Value=\"56bce8b03146a1a47339b2bc8a7a40af276146b9\"/>\n        <Features>\n            <Feature Value=\"33\"/>\n            <Feature Value=\"1\"/>\n            <Feature Value=\"12\"/>\n            <Feature Value=\"2\"/>\n            <Feature Value=\"24\"/>\n            <Feature Value=\"3\"/>\n            <Feature Value=\"36\"/>\n            <Feature Value=\"17\"/>\n            <Feature Value=\"19\"/>\n            <Feature Value=\"62\"/>\n        </Features>\n        <DeveloperData Value=\"AQAAAEY0LURFWjQtVVk1TS04M1lULTNOWVAtNEtXNg==\"/>\n        <SerialMasked Value=\"F4-DEZ4-UY5M-83YT-3NYP-XXXX\"/>\n        <StartDate Value=\"2021-01-27T00:00:00\"/>\n        <UpdateDate Value=\"2021-05-06T05:54:38\"/>\n        <InitialActivationDate Value=\"2021-01-27T07:00:51\"/>\n        <LicenseVersion Value=\"6.x\"/>\n        <ClientProvidedVersion Value=\"2019.4.25f1\"/>\n        <AlwaysOnline Value=\"false\"/>\n        <Entitlements>\n            <Entitlement Ns=\"unity_editor\" Tag=\"UnityPersonal\" Type=\"EDITOR\" ValidTo=\"9999-12-31T00:00:00\"/>\n            <Entitlement Ns=\"unity_editor\" Tag=\"DarkSkin\" Type=\"EDITOR_FEATURE\" ValidTo=\"9999-12-31T00:00:00\"/>\n        </Entitlements>\n    </License>\n<Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\"><SignedInfo><CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\"/><SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/><Reference URI=\"#Terms\"><Transforms><Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/></Transforms><DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/><DigestValue>xCBKYap0JQVBqX22jba4k5Da5t0=</DigestValue></Reference></SignedInfo><SignatureValue>n8eYH6Exi6mpw6onE5blxgQY1bAb+NLrsblMlFLUTPVTGw5KmugyVHedyZiI47D3nZVK/FpGaVxJ\n2xcNBr8yR1lfQrakloAZhvlCTiNi/O8N+6aHGZgyi/5+2SLqj0E/ZB+bVlTaSioLy/cF6iOt0d0T\nvW+VEdhht9iWrKKeNBakcXGccX5tQhJFaTR8aYevp0t0TMz3cfGPhs5qDivufqoFl34Y6qa8HjAC\n+OvrlD0TIgMyev+czK0KMIRsT/euOoyOHupXb93BuiMWceRIqf4mYvPKJbhx15Zy3uxHbsF6lV8q\nGah5JCb8iGRTDmG2JzMg6pXCjiznPFNk4Tkl7Q==</SignatureValue></Signature></root>", null]')[secrets.UNITY_SERIAL != null] }}

jobs:
  configuration:
    if: |
      (github.event_name == 'pull_request') ||
      (
        github.event_name == 'push' &&
        (
        github.ref == 'refs/heads/main' ||
        contains(github.ref, 'refs/tags/v') ||
        contains(github.event.head_commit.message, '[CI BUILD]')
        )
      )
    name: Configure Build Parameters
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version}}
      stamp: ${{ steps.version.outputs.stamp }}
      prerelease: ${{ steps.version.outputs.prerelease }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      basename: ${{ steps.github.outputs.basename }}
      description: ${{ steps.github.outputs.description}}
      itchchannelname: ${{ steps.version.outputs.itchchannelname }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true  # We don't use LFS, but it adds no time, and leave it here in case we do at some point later

      - name: Calculate version and stamp
        id: version
        run: |
          MAJOR_MINOR=$(git describe --tags --abbrev=0 --match "v[0-9]*.[0-9]*" ${{ github.event.pull_request.head.sha }})
          PATCH_VERSION=$(git describe --tags --match "v[0-9]*.[0-9]*" --first-parent ${{ github.event.pull_request.head.sha }} | cut -d'-' -f2)
          STAMP=$(git describe --tags --match "v[0-9]*.[0-9]*" ${{ github.event.pull_request.head.sha }} | cut -d'-' -f3)
          if [ $PATCH_VERSION == $MAJOR_MINOR ]
          then
            PATCH_VERSION="0"
            STAMP=""
            echo "Formal version: $MAJOR_MINOR.$PATCH_VERSION"
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "itchchannelname=release" >> $GITHUB_OUTPUT

          else
            echo "Prerelease version $MAJOR_MINOR.$PATCH_VERSION $STAMP"
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "itchchannelname=beta" >> $GITHUB_OUTPUT
          fi
          VERSION=$(echo "$MAJOR_MINOR.$PATCH_VERSION" | sed -e 's/^v//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "stamp=$STAMP" >> $GITHUB_OUTPUT
      - name: Calculate Changelog
        id: changelog
        env:
          PRERELEASE: ${{ steps.version.outputs.prerelease }}
        run: |
          if [ "$PRERELEASE" == "true" ]
          then
            PREV=$(git describe --tags --abbrev=0 HEAD^)
          else
            PREV=$(git describe --tags --match "v[0-9]*.[0-9]*" --abbrev=0 HEAD^)
          fi
          CHANGELOG=$(git log --pretty=oneline --first-parent $PREV..HEAD)
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT
      - name: Set custom app name and package name, if relevant
        id: github
        env:
          PRERELEASE: ${{ steps.version.outputs.prerelease }}
        run: |
          # For a PR action (i.e., syncronize / open), the value of github.ref will be refs/pull/1234/merge
          # For a push action, it will be either refs/heads/foo_branch_name OR refs/tags/v1234.
          # We want to use the base name for pushes of tags or to main, the PR number for PRs, and the branch name for named branches.
          if [[ "$PRERELEASE" == "false" || ${{ github.ref }} == refs/heads/main ]]
          then
            echo "basename=OpenBrush" >> $GITHUB_OUTPUT
            echo "description=" >> $GITHUB_OUTPUT
          else
            if [[ ${{ github.ref }} == refs/pull/* ]]
            then
              DESCRIPTION="PR#$(echo ${{ github.ref }} | sed -e 's#refs/pull/##' -e 's#/merge##')"
            elif [[ ${{ github.ref }} == refs/heads/* ]]
            then
              DESCRIPTION="$(echo ${{ github.ref }} | sed -e 's#refs/heads/##')"
            else
              DESCRIPTION="Unknown"
            fi
            echo "description=-btb-description ${DESCRIPTION}" >> $GITHUB_OUTPUT
            IDENTIFIER=$(echo ${DESCRIPTION} | sed -e 's/[\/#_-]//g')
            echo "basename=OpenBrush-${IDENTIFIER}" >> $GITHUB_OUTPUT
          fi
  build:
    name: ${{ matrix.name }}
    needs: configuration
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # We don't use an actual matrix because there's more exceptions than actual cases!
        include:
          - name: Windows Pimax
            targetPlatform: StandaloneWindows64
            vrsdk: OpenXR
            cache: Windows
    steps:
      - name: Free extra space
        # This takes several minutes, so we only do it where required
        if: false  # We needed this to build for Android with the Ubuntu 20.04 image, which started with 29GB free. The 22.04 starts with 37GB free, and this is enough.
        run: |
          echo "Initial free space"
          df -h /
          echo "Removing all pre-loaded docker images"
          docker rmi $(docker image ls -aq)  # Removes ~4GB
          df -h /
          echo "Listing 100 largest packages"
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -rn | head -n 100
          echo "Removing unneeded large packages"
          sudo apt-get update
          sudo apt-get remove -y '^ghc-.*' '^dotnet-.*' azure-cli google-cloud-sdk powershell google-chrome-stable firefox microsoft-edge-stable 'php.*' 'mongodb-*' 'mysql-*' 'mariadb-*' 'temurin-*' 'openjdk-*' default-jre-headless  # Removes ~7.5 GB
          sudo apt-get autoremove -y
          sudo apt-get clean
          df -h /
          echo "Listing 100 largest remaining packages"
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -rn | head -n 100
          echo "Removing remaining large directories"
          rm -rf /usr/share/dotnet/  # Removes ~1GB
          df -h /
          rm -rf "$AGENT_TOOLSDIRECTORY"  # Removes ~7GB
          echo "Disk space after cleanup"
          df -h /

  release:
    name: Create Github Release
    needs: [configuration, build]
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' &&
      github.repository == 'icosa-gallery/open-brush' &&
      (github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/v'))

    steps:
      - name: Download Build Artifacts (Windows OpenXR)
        uses: actions/download-artifact@v3
        with:
          name: Windows OpenXR
          path: build_windows_openxr

      - name: Download Build Artifacts (Windows Rift)
        uses: actions/download-artifact@v3
        with:
          name: Windows Rift
          path: build_windows_rift

      - name: Download Build Artifacts (Windows Monoscopic)
        uses: actions/download-artifact@v3
        with:
          name: Windows Monoscopic
          path: build_windows_mono

      - name: Download Build Artifacts (Oculus Quest)
        uses: actions/download-artifact@v3
        with:
          name: Oculus Quest
          path: build_oculus_quest

      - name: Download Build Artifacts (Pico)
        uses: actions/download-artifact@v3
        with:
          name: Android Pico
          path: build_android_pico

      - name: Package Artifacts for release
        env:
          VERSION: ${{ needs.configuration.outputs.version }}
        run: |
          mkdir releases
          mv build_oculus_quest/*/com.Icosa.OpenBrush*apk releases/OpenBrush_Quest_$VERSION.apk
          mv build_android_pico/*/com.Icosa.OpenBrush*apk releases/OpenBrush_Pico_$VERSION.apk
          mv build_windows_openxr/StandaloneWindows64-OpenXR/ releases/OpenBrush_Desktop_$VERSION/
          mv build_windows_rift/StandaloneWindows64-Oculus/ releases/OpenBrush_Rift_$VERSION/
          mv build_windows_mono/StandaloneWindows64-Monoscopic/ releases/OpenBrush_Mono_$VERSION/
          cd releases
          zip -r OpenBrush_Desktop_$VERSION.zip OpenBrush_Desktop_$VERSION/
          zip -r OpenBrush_Rift_$VERSION.zip OpenBrush_Rift_$VERSION/
          zip -r OpenBrush_Mono_$VERSION.zip OpenBrush_Mono_$VERSION/
          rm -rf OpenBrush_Desktop_$VERSION
          rm -rf OpenBrush_Rift_$VERSION
          rm -rf OpenBrush_Mono_$VERSION
      - name: Publish
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: ${{ needs.configuration.outputs.changelog }}
          prerelease: ${{ needs.configuration.outputs.prerelease }}
          tag_name: ${{ needs.configuration.outputs.version }}
          files: releases/*

  publish_steam:
    name: Publish Steam Release
    needs: [configuration, build]
    if: |
      github.event_name == 'push' &&
      github.repository == 'icosa-gallery/open-brush' &&
      (github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true  # We don't use LFS, but it adds no time, and leave it here in case we do at some point later
      - name: Setup steamcmd
        uses: CyberAndrii/setup-steamcmd@v1.1.5
      - name: Restore steam login config
        run: |
          mkdir -p /home/runner/Steam/config
          echo "${{ secrets.STEAM_CONFIG_VDF}}" | base64 -d - > /home/runner/Steam/config/config.vdf
          echo "${{ secrets.STEAM_SSFN }}" | base64 -d - > /home/runner/Steam/${{ secrets.STEAM_SSFN_FILENAME }}
      - name: Download Build Artifacts (Windows OpenXR)
        uses: actions/download-artifact@v3
        with:
          name: Windows OpenXR
          path: build_windows_openxr
      - name: Upload Regular Build
        run: |
          pip install -U j2cli
          j2 Support/steam/app.vdf.j2 > build_windows_openxr/app.vdf
          j2 Support/steam/main_depot.vdf.j2 > build_windows_openxr/main_depot.vdf
          j2 Support/steam/installscript_win.vdf.j2 > build_windows_openxr/installscript_win.vdf
          steamcmd +login $STEAM_USERNAME $STEAM_PASSWORD +run_app_build $(pwd)/build_windows_openxr/app.vdf +quit
        env:
          STEAM_USERNAME: ${{ secrets.STEAM_USERNAME }}
          STEAM_PASSWORD: ${{ secrets.STEAM_PASSWORD }}
          VERSION: ${{ needs.configuration.outputs.version }}
          OPEN_BRUSH_APP_ID: 1634870
          OPEN_BRUSH_WINDOWS_DEPOT_ID: 1634871
          OPEN_BRUSH_EXECUTABLE: ${{ needs.configuration.outputs.basename}}.exe
          CHANNEL: beta
      # Temporary - upload to old prerelease channels
      # TODO: remove at 2.0
      - name: Upload Legacy Regular Build
        run: |
          pip install -U j2cli
          j2 Support/steam/app.vdf.j2 > build_windows_openxr/app.vdf
          j2 Support/steam/main_depot.vdf.j2 > build_windows_openxr/main_depot.vdf
          j2 Support/steam/installscript_win.vdf.j2 > build_windows_openxr/installscript_win.vdf
          steamcmd +login $STEAM_USERNAME $STEAM_PASSWORD +run_app_build $(pwd)/build_windows_openxr/app.vdf +quit
        env:
          STEAM_USERNAME: ${{ secrets.STEAM_USERNAME }}
          STEAM_PASSWORD: ${{ secrets.STEAM_PASSWORD }}
          VERSION: ${{ needs.configuration.outputs.version }}
          OPEN_BRUSH_APP_ID: 1634870
          OPEN_BRUSH_WINDOWS_DEPOT_ID: 1634871
          OPEN_BRUSH_EXECUTABLE: ${{ needs.configuration.outputs.basename}}.exe
          CHANNEL: prerelease
      # Upload the regular build to the experimental channels as well.
      # TODO: remove at 2.0
      - name: Upload Regular Build as experimental
        run: |
          pip install -U j2cli
          j2 Support/steam/app.vdf.j2 > build_windows_openxr/app.vdf
          j2 Support/steam/main_depot.vdf.j2 > build_windows_openxr/main_depot.vdf
          j2 Support/steam/installscript_win.vdf.j2 > build_windows_openxr/installscript_win.vdf
          steamcmd +login $STEAM_USERNAME $STEAM_PASSWORD +run_app_build $(pwd)/build_windows_openxr/app.vdf +quit
        env:
          STEAM_USERNAME: ${{ secrets.STEAM_USERNAME }}
          STEAM_PASSWORD: ${{ secrets.STEAM_PASSWORD }}
          VERSION: ${{ needs.configuration.outputs.version }}
          OPEN_BRUSH_APP_ID: 1634870
          OPEN_BRUSH_WINDOWS_DEPOT_ID: 1634871
          OPEN_BRUSH_EXECUTABLE: ${{ needs.configuration.outputs.basename}}.exe
          CHANNEL: beta-experimental
      - name: Upload Legacy Build as experimental
        run: |
          pip install -U j2cli
          j2 Support/steam/app.vdf.j2 > build_windows_openxr/app.vdf
          j2 Support/steam/main_depot.vdf.j2 > build_windows_openxr/main_depot.vdf
          j2 Support/steam/installscript_win.vdf.j2 > build_windows_openxr/installscript_win.vdf
          steamcmd +login $STEAM_USERNAME $STEAM_PASSWORD +run_app_build $(pwd)/build_windows_openxr/app.vdf +quit
        env:
          STEAM_USERNAME: ${{ secrets.STEAM_USERNAME }}
          STEAM_PASSWORD: ${{ secrets.STEAM_PASSWORD }}
          VERSION: ${{ needs.configuration.outputs.version }}
          OPEN_BRUSH_APP_ID: 1634870
          OPEN_BRUSH_WINDOWS_DEPOT_ID: 1634871
          OPEN_BRUSH_EXECUTABLE: ${{ needs.configuration.outputs.basename}}.exe
          CHANNEL: prerelease-experimental

      - name: Save logs
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: steamcmd logs
          path: build_output/

  publish_pimax:
    name: Publish Pimax Release
    needs: [configuration, build]
    runs-on: windows-latest
    env:
      PIMAX_APP_ID: ${{ secrets.PIMAX_APP_ID }}
      PIMAX_USERNAME: ${{ secrets.PIMAX_USERNAME }}
      PIMAX_PASSWORD: ${{ secrets.PIMAX_PASSWORD }}
    if: |
      github.repository == 'icosa-gallery/open-brush'

    steps:
      - name: Publish Pimax Builds
        run: |
          New-Item "releases" -Type Directory
          Set-Location -Path "releases"
          Set-PSDebug -Trace 2
          dir
          Invoke-WebRequest -Uri https://dl.appstore.pimax.com/tools/pimax-dev-util.exe -OutFile ./pimax-dev-util.exe
          dir
          ./pimax-dev-util.exe login -u $env:PIMAX_USERNAME  -p $env:PIMAX_PASSWORD
          # pimax-dev-util.exe upload-pc-build -a $env:PIMAX_APP_ID -d OpenBrush_Pimax_$env:VERSION.zip

  publish_itch:
    name: Publish Itch.io Release
    needs: [configuration, build]
    runs-on: ubuntu-latest
    env:
      ITCH_SUBCHANNEL_NAME: ${{ needs.configuration.outputs.itchchannelname }}
      BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
      ITCH_GAME: openbrush
      ITCH_USER: openbrush
      VERSION: ${{ needs.configuration.outputs.version }}
    if: |
      github.event_name == 'push' &&
      github.repository == 'icosa-gallery/open-brush' &&
      (github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/v'))

    steps:
      - name: Download Build Artifacts (Windows OpenXR)
        uses: actions/download-artifact@v3
        with:
          name: Windows OpenXR
          path: build_windows_openxr

      - name: Download Build Artifacts (Oculus Quest)
        uses: actions/download-artifact@v3
        with:
          name: Oculus Quest
          path: build_oculus_quest

      - name: Package Artifacts for release
        run: |
          mkdir releases
          mv build_oculus_quest/*/com.Icosa.OpenBrush*apk releases/OpenBrush_Quest_$VERSION.apk
          mv build_windows_openxr/StandaloneWindows64-OpenXR/ releases/OpenBrush_Desktop_$VERSION/
      - name: Publish Windows
        uses: josephbmanley/butler-publish-itchio-action@master
        env:
          CHANNEL: windows-${{ env.ITCH_SUBCHANNEL_NAME }}
          PACKAGE: releases/OpenBrush_Desktop_${{ needs.configuration.outputs.version }}
      - name: Publish Quest
        uses: josephbmanley/butler-publish-itchio-action@master
        env:
          CHANNEL: android-quest-${{ env.ITCH_SUBCHANNEL_NAME }}
          PACKAGE: releases/OpenBrush_Quest_${{ needs.configuration.outputs.version }}.apk

  publish_oculus:
    name: Publish Oculus Release
    needs: [configuration, build]
    runs-on: macos-latest  # the ovr-platform-util tool is only available for Mac and Windows
    if: |
      github.event_name == 'push' &&
      github.repository == 'icosa-gallery/open-brush' &&
      (github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/v'))

    steps:
      - name: Download Build Artifacts (Windows Rift)
        uses: actions/download-artifact@v3
        with:
          name: Windows Rift
          path: build_windows_rift
      - name: Download Build Artifacts (Oculus Quest)
        uses: actions/download-artifact@v3
        with:
          name: Oculus Quest
          path: build_oculus_quest
      - name: Publish Oculus Builds
        env:
          VERSION: ${{ needs.configuration.outputs.version }}
          PRERELEASE: ${{ needs.configuration.outputs.prerelease }}
          OCULUS_RIFT_APP_ID: ${{ secrets.OCULUS_RIFT_APP_ID }}
          OCULUS_RIFT_APP_SECRET: ${{ secrets.OCULUS_RIFT_APP_SECRET }}
          OCULUS_QUEST_APP_ID: ${{ secrets.OCULUS_QUEST_APP_ID }}
          OCULUS_QUEST_APP_SECRET: ${{ secrets.OCULUS_QUEST_APP_SECRET }}
        run: |
          mkdir releases
          mv build_oculus_quest/*/com.Icosa.OpenBrush*apk releases/OpenBrush_Quest_$VERSION.apk
          mv build_oculus_quest/*/com.Icosa.OpenBrush*.symbols.zip releases/symbols.zip
          mv build_windows_rift/StandaloneWindows64-Oculus/ releases/OpenBrush_Rift_$VERSION/
          cd releases
          unzip symbols.zip
          zip -r OpenBrush_Rift_$VERSION.zip OpenBrush_Rift_$VERSION/
          curl -L 'https://www.oculus.com/download_app/?id=1462426033810370' -o ovr-platform-util
          chmod 755 ovr-platform-util

          if [ "$PRERELEASE" == "false" ]
          then
            ./ovr-platform-util upload-quest-build --app-id ${OCULUS_QUEST_APP_ID} --app-secret ${OCULUS_QUEST_APP_SECRET} --apk OpenBrush_Quest_$VERSION.apk --channel LIVE --debug_symbols_dir ./arm64-v8a/ --debug-symbols-pattern '*.so'
            ./ovr-platform-util upload-rift-build --app-id ${OCULUS_RIFT_APP_ID} --app-secret ${OCULUS_RIFT_APP_SECRET} --build-dir OpenBrush_Rift_$VERSION --launch-file OpenBrush.exe --channel LIVE --version $VERSION --firewall_exceptions true --redistributables 822786567843179,1675031999409058,2657209094360789
          else
            ./ovr-platform-util upload-quest-build --app-id ${OCULUS_QUEST_APP_ID} --app-secret ${OCULUS_QUEST_APP_SECRET} --apk OpenBrush_Quest_$VERSION.apk --channel Beta --debug_symbols_dir ./arm64-v8a/ --debug-symbols-pattern '*.so'
            ./ovr-platform-util upload-rift-build --app-id ${OCULUS_RIFT_APP_ID} --app-secret ${OCULUS_RIFT_APP_SECRET} --build-dir OpenBrush_Rift_$VERSION --launch-file OpenBrush.exe --channel BETA --version $VERSION --firewall_exceptions true --redistributables 822786567843179,1675031999409058,2657209094360789
          fi
