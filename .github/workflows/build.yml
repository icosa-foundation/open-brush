# yamllint disable rule:line-length
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
---
name: Builds

on:  # yamllint disable-line rule:truthy
  pull_request: {}
  push:
    branches:
      - "**"
    tags:
      - "v*"

env:
  UNITY_VERSION: "2021.3.0f1"
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
  # If UNITY_SERIAL is not set, then use a hardcoded license. Otherwise, don't set this, so the game-ci actions will use EMAIL/PASS/SERIAL
  UNITY_LICENSE: ${{ fromJSON('["<?xml version=\"1.0\" encoding=\"UTF-8\"?><root>\n    <License id=\"Terms\">\n        <MachineBindings>\n            <Binding Key=\"1\" Value=\"576562626572264761624c65526f7578\"/>\n            <Binding Key=\"2\" Value=\"576562626572264761624c65526f7578\"/>\n        </MachineBindings>\n        <MachineID Value=\"D7nTUnjNAmtsUMcnoyrqkgIbYdM=\"/>\n        <SerialHash Value=\"56bce8b03146a1a47339b2bc8a7a40af276146b9\"/>\n        <Features>\n            <Feature Value=\"33\"/>\n            <Feature Value=\"1\"/>\n            <Feature Value=\"12\"/>\n            <Feature Value=\"2\"/>\n            <Feature Value=\"24\"/>\n            <Feature Value=\"3\"/>\n            <Feature Value=\"36\"/>\n            <Feature Value=\"17\"/>\n            <Feature Value=\"19\"/>\n            <Feature Value=\"62\"/>\n        </Features>\n        <DeveloperData Value=\"AQAAAEY0LURFWjQtVVk1TS04M1lULTNOWVAtNEtXNg==\"/>\n        <SerialMasked Value=\"F4-DEZ4-UY5M-83YT-3NYP-XXXX\"/>\n        <StartDate Value=\"2021-01-27T00:00:00\"/>\n        <UpdateDate Value=\"2021-05-06T05:54:38\"/>\n        <InitialActivationDate Value=\"2021-01-27T07:00:51\"/>\n        <LicenseVersion Value=\"6.x\"/>\n        <ClientProvidedVersion Value=\"2019.4.25f1\"/>\n        <AlwaysOnline Value=\"false\"/>\n        <Entitlements>\n            <Entitlement Ns=\"unity_editor\" Tag=\"UnityPersonal\" Type=\"EDITOR\" ValidTo=\"9999-12-31T00:00:00\"/>\n            <Entitlement Ns=\"unity_editor\" Tag=\"DarkSkin\" Type=\"EDITOR_FEATURE\" ValidTo=\"9999-12-31T00:00:00\"/>\n        </Entitlements>\n    </License>\n<Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\"><SignedInfo><CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\"/><SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/><Reference URI=\"#Terms\"><Transforms><Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/></Transforms><DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/><DigestValue>xCBKYap0JQVBqX22jba4k5Da5t0=</DigestValue></Reference></SignedInfo><SignatureValue>n8eYH6Exi6mpw6onE5blxgQY1bAb+NLrsblMlFLUTPVTGw5KmugyVHedyZiI47D3nZVK/FpGaVxJ\n2xcNBr8yR1lfQrakloAZhvlCTiNi/O8N+6aHGZgyi/5+2SLqj0E/ZB+bVlTaSioLy/cF6iOt0d0T\nvW+VEdhht9iWrKKeNBakcXGccX5tQhJFaTR8aYevp0t0TMz3cfGPhs5qDivufqoFl34Y6qa8HjAC\n+OvrlD0TIgMyev+czK0KMIRsT/euOoyOHupXb93BuiMWceRIqf4mYvPKJbhx15Zy3uxHbsF6lV8q\nGah5JCb8iGRTDmG2JzMg6pXCjiznPFNk4Tkl7Q==</SignatureValue></Signature></root>", null]')[secrets.UNITY_SERIAL != null] }}

jobs:
  configuration:
    if: |
      (github.event_name == 'pull_request') ||
      (
        github.event_name == 'push' &&
        (
        github.ref == 'refs/heads/main' ||
        contains(github.ref, 'refs/tags/v') ||
        contains(github.event.head_commit.message, '[CI BUILD]')
        )
      )
    name: Configure Build Parameters
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version}}
      stamp: ${{ steps.version.outputs.stamp }}
      prerelease: ${{ steps.version.outputs.prerelease }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      basename: ${{ steps.github.outputs.basename }}
      description: ${{ steps.github.outputs.description}}
      itchchannelname: ${{ steps.version.outputs.itchchannelname }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true  # We don't use LFS, but it adds no time, and leave it here in case we do at some point later

      - name: Calculate version and stamp
        id: version
        run: |
          MAJOR_MINOR=$(git describe --tags --abbrev=0 --match "v[0-9]*.[0-9]*" ${{ github.event.pull_request.head.sha }})
          PATCH_VERSION=$(git describe --tags --match "v[0-9]*.[0-9]*" --first-parent ${{ github.event.pull_request.head.sha }} | cut -d'-' -f2)
          STAMP=$(git describe --tags --match "v[0-9]*.[0-9]*" ${{ github.event.pull_request.head.sha }} | cut -d'-' -f3)
          if [ $PATCH_VERSION == $MAJOR_MINOR ]
          then
            PATCH_VERSION="0"
            STAMP=""
            echo "Formal version: $MAJOR_MINOR.$PATCH_VERSION"
            echo "::set-output name=prerelease::false"
            echo "::set-output name=itchchannelname::release"

          else
            echo "Prerelease version $MAJOR_MINOR.$PATCH_VERSION $STAMP"
            echo "::set-output name=prerelease::true"
            echo "::set-output name=itchchannelname::beta"
          fi
          VERSION=$(echo "$MAJOR_MINOR.$PATCH_VERSION" | sed -e 's/^v//')
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=stamp::$STAMP"
      - name: Calculate Changelog
        id: changelog
        env:
          PRERELEASE: ${{ steps.version.outputs.prerelease }}
        run: |
          if [ "$PRERELEASE" == "true" ]
          then
            PREV=$(git describe --tags --abbrev=0 HEAD^)
          else
            PREV=$(git describe --tags --match "v[0-9]*.[0-9]*" --abbrev=0 HEAD^)
          fi
          CHANGELOG=$(git log --pretty=oneline --first-parent $PREV..HEAD)
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          echo "::set-output name=changelog::$CHANGELOG"
      - name: Set custom app name and package name, if relevant
        id: github
        env:
          PRERELEASE: ${{ steps.version.outputs.prerelease }}
        run: |
          # For a PR action (i.e., syncronize / open), the value of github.ref will be refs/pull/1234/merge
          # For a push action, it will be either refs/heads/foo_branch_name OR refs/tags/v1234.
          # We want to use the base name for pushes of tags or to main, the PR number for PRs, and the branch name for named branches.
          if [[ "$PRERELEASE" == "false" || ${{ github.ref }} == refs/heads/main ]]
          then
            echo "::set-output name=basename::OpenBrush"
            echo "::set-output name=description::"
          else
            if [[ ${{ github.ref }} == refs/pull/* ]]
            then
              DESCRIPTION="PR#$(echo ${{ github.ref }} | sed -e 's#refs/pull/##' -e 's#/merge##')"
            elif [[ ${{ github.ref }} == refs/heads/* ]]
            then
              DESCRIPTION="$(echo ${{ github.ref }} | sed -e 's#refs/heads/##')"
            else
              DESCRIPTION="Unknown"
            fi
            echo "::set-output name=description::-btb-description ${DESCRIPTION}"
            IDENTIFIER=$(echo ${DESCRIPTION} | sed -e 's/[\/#_-]//g')
            echo "::set-output name=basename::OpenBrush-${IDENTIFIER}"
          fi
  build:
    name: ${{ matrix.name }}
    needs: configuration
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # We don't use an actual matrix because there's more exceptions than actual cases!
        include:
          - name: Windows OpenXR
            targetPlatform: StandaloneWindows64
            vrsdk: OpenXR
          - name: Windows Rift
            targetPlatform: StandaloneWindows64
            vrsdk: Oculus
          - name: Windows OpenXR Experimental
            targetPlatform: StandaloneWindows64
            vrsdk: OpenXR
            extraoptions: -btb-experimental
          - name: Windows Rift Experimental
            targetPlatform: StandaloneWindows64
            vrsdk: Oculus
            extraoptions: -btb-experimental
          - name: Oculus Quest
            targetPlatform: Android
            vrsdk: Oculus
            extraoptions: -setDefaultPlatformTextureFormat astc -btb-il2cpp
          - name: Oculus Quest Experimental
            targetPlatform: Android
            vrsdk: Oculus
            extraoptions: -setDefaultPlatformTextureFormat astc -btb-il2cpp -btb-experimental


    steps:
      - name: Free extra space
        # This takes several minutes, so we only do it where required
        if: matrix.targetPlatform == 'Android'
        run: |
          echo "Initial free space"
          df -h
          sudo swapoff -a
          sudo rm -f /swapfile
          docker rmi $(docker image ls -aq)
          #echo "Listing 100 largest packages"
          #dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -rn | head -n 100
          echo "Removing large packages"
          sudo apt-get update
          sudo apt-get remove -y '^ghc-.*' '^dotnet-.*' azure-cli google-cloud-sdk 'adoptopenjdk-.*-hotspot' google-chrome-stable firefox 'php.*'
          sudo apt-get autoremove -y
          sudo apt-get clean
          echo "Removing remaining large directories"
          rm -rf /usr/share/dotnet/
          rm -rf "$AGENT_TOOLSDIRECTORY"
          echo "Disk space after cleanup"
          df -h

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true  # We don't use LFS, but it adds no time, and leave it here in case we do at some point later

      - name: Install Oculus unity package
        if: matrix.vrsdk == 'Oculus'
        run: |
          # version 38.0
          # Code courtesy of Jonathan Perret, released freely. Download the package and manually extract it to Assets/Oculus. We only need VR and Platform.
          wget -q https://securecdn.oculus.com/binaries/download/?id=5029409037101874 -O package.tmp
          mkdir tmp
          tar -C tmp -xzf package.tmp
          find tmp -type f | xargs chmod a-x
          for pn in tmp/*/pathname; do
            id=${pn%/*}
            id=${id#*/}
            p=$(head -1 $pn)
            d=${p%/*}
            mkdir -p "tmp/$d"
            [ -f "tmp/$id/asset" ] && cp -v "tmp/$id/asset" "tmp/$p"
            cp "tmp/$id/asset.meta" "tmp/${p}.meta"
          done
          mkdir -p Assets/Oculus
          cp -R tmp/Assets/Oculus/VR Assets/Oculus/
          cp -R tmp/Assets/Oculus/Platform Assets/Oculus/
          rm -rf tmp package.tmp
          ln -s ../../Assets/Oculus/VR/Editor/OVRPluginUpdater.cs Assets/Editor/

      - name: Install TextMesh Pro package
        run: |
          # version 3.0.6; must be updated if the version changes
          # This replaces the GUI's "Window -> TextMesh Pro -> Import TMP Essential Resources". I don't know why Unity makes this sort of thing so hard!
          mkdir tmp.plugin
          wget -q https://download.packages.unity.com/com.unity.textmeshpro/-/com.unity.textmeshpro-3.0.6.tgz -O tmp.plugin/plugin.tgz
          tar -C tmp.plugin -xzf tmp.plugin/plugin.tgz
          mkdir tmp.package
          tar -C tmp.package -xzf 'tmp.plugin/package/Package Resources/TMP Essential Resources.unitypackage'
          for pn in tmp.package/*/pathname; do
            id=${pn%/*}
            id=${id#*/}
            p=$(head -1 $pn)
            d=${p%/*}
            mkdir -p "tmp.package/$d"
            [ -f "tmp.package/$id/asset" ] && cp -v "tmp.package/$id/asset" "tmp.package/$p"
            cp "tmp.package/$id/asset.meta" "tmp.package/${p}.meta"
          done
          mkdir -p 'Assets/TextMesh Pro'
          cp -R 'tmp.package/Assets/TextMesh Pro' Assets/
          rm -rf tmp.plugin tmp.package

      - uses: actions/cache@v2
        with:
          path: Library
          # We only use the targetPlatform for caching; saving a cache for each commit is far too expensive. Worst case, it's a few commits out of date.
          key: Library-${{ matrix.targetPlatform }}-${{ env.UNITY_VERSION }}
          restore-keys: |
            Library-${{ matrix.targetPlatform }}-

      - name: Manually delete OpenXR packages
        if: matrix.vrsdk == 'Oculus'
        run: |
          cat Packages/manifest.json | jq 'del( .dependencies ["com.unity.xr.openxr"] )' | tee Packages/manifest.json.new
          mv Packages/manifest.json.new Packages/manifest.json
          cat Packages/packages-lock.json | jq 'del( .dependencies ["com.unity.xr.openxr"] )' | tee Packages/packages-lock.json.new
          mv Packages/packages-lock.json.new Packages/packages-lock.json

      - name: Update Oculus OVR Plugin
        uses: game-ci/unity-builder@v2
        if: matrix.vrsdk == 'Oculus'
        with:
          unityVersion: ${{ env.UNITY_VERSION }}
          targetPlatform: ${{ matrix.targetPlatform }}
          versioning: Custom
          version: ${{ needs.configuration.outputs.version }}
          buildMethod: OVRPluginUpdater.BatchmodePluginUpdate  # We created this symlink above

      - name: Set filename (for Windows)
        if: matrix.targetPlatform == 'StandaloneWindows64'
        env:
          BASENAME: ${{ needs.configuration.outputs.basename}}
        run:
          echo "filename=$BASENAME.exe" >> $GITHUB_ENV

      - name: Set filename (for Android)
        if: matrix.targetPlatform == 'Android'
        env:
          BASENAME: ${{ needs.configuration.outputs.basename}}
        run:
          echo "filename=com.Icosa.$BASENAME.apk" >> $GITHUB_ENV

      - name: Set build stamp
        if: ${{ needs.configuration.outputs.stamp }}
        # We checkout the merge commit, but for the purpose of the tag, use the version from the PR, not the merge commit, which is rather hard to find later. We skip the version tag, since this comes from the code and can't be easily overwritten
        run: |
          echo "stamp=-btb-stamp ${{needs.configuration.outputs.stamp}}" >> $GITHUB_ENV

      - name: Update version
        env:
          VERSION: ${{ needs.configuration.outputs.version}}
        run: |
          sed -e "s/m_VersionNumber:.*$/m_VersionNumber: $VERSION/" -i Assets/Scenes/Main.unity
          sed -e "s/bundleVersion:.*$/bundleVersion: $VERSION/" -i ProjectSettings/ProjectSettings.asset

      - name: Add secure secrets file
        env:
          SECRETS_ASSET: ${{ secrets.SECRETS_ASSET }}
          SECRETS_ASSET_META: ${{ secrets.SECRETS_ASSET_META }}
        if: |
          env.SECRETS_ASSET != null &&
          env.SECRETS_ASSET_META != null
        run: |
          echo "$SECRETS_ASSET" > Assets/Secrets.asset
          echo "$SECRETS_ASSET_META" > Assets/Secrets.asset.meta
          SECRETS_ASSET_META_GUID=$(grep "guid:" Assets/Secrets.asset.meta | cut -d" " -f2)
          sed -e "s/Secrets:.*$/Secrets: {fileID: 11400000, guid: $SECRETS_ASSET_META_GUID, type: 2}/" -i Assets/Scenes/Main.unity

      - name: Enable keystore
        run: |
          sed -e 's/androidUseCustomKeystore.*$/androidUseCustomKeystore: 1/' -i ProjectSettings/ProjectSettings.asset

      - name: Build project
        uses: game-ci/unity-builder@v2
        env:
          VERSION: ${{ needs.configuration.outputs.version}}
        with:
          allowDirtyBuild: true  # Because of the OVR Update, the build tree might be dirty
          unityVersion: ${{ env.UNITY_VERSION }}
          targetPlatform: ${{ matrix.targetPlatform }}
          customParameters: -btb-target ${{ matrix.targetPlatform }} -btb-display ${{ matrix.vrsdk }} -btb-out /github/workspace/build/${{ matrix.targetPlatform }}-${{ matrix.vrsdk }}/${{ env.filename }} ${{ needs.configuration.outputs.description}} ${{ env.stamp }} ${{ matrix.extraoptions }}
          versioning: Custom
          version: ${{ needs.configuration.outputs.version }}
          buildMethod: BuildTiltBrush.CommandLine
          androidKeystoreName: openbrush.keystore
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 || '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' }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS || 'FakeKey' }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME || 'openbrush-non-official' }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS || 'FakeKey' }}

      - name: Upload build/
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.name }}
          path: build

  release:
    name: Create Github Release
    needs: [configuration, build]
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' &&
      github.repository == 'icosa-gallery/open-brush' &&
      (github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/v'))

    steps:
      - name: Download Build Artifacts (Windows OpenXR)
        uses: actions/download-artifact@v2
        with:
          name: Windows OpenXR
          path: build_windows_openxr

      - name: Download Build Artifacts (Windows OpenXR Experimental)
        uses: actions/download-artifact@v2
        with:
          name: Windows OpenXR Experimental
          path: build_windows_openxr_experimental

      - name: Download Build Artifacts (Windows Rift)
        uses: actions/download-artifact@v2
        with:
          name: Windows Rift
          path: build_windows_rift

      - name: Download Build Artifacts (Windows Rift Experimental)
        uses: actions/download-artifact@v2
        with:
          name: Windows Rift Experimental
          path: build_windows_rift_experimental

      - name: Download Build Artifacts (Oculus Quest)
        uses: actions/download-artifact@v2
        with:
          name: Oculus Quest
          path: build_oculus_quest

      - name: Download Build Artifacts (Oculus Quest Experimental)
        uses: actions/download-artifact@v2
        with:
          name: Oculus Quest Experimental
          path: build_oculus_quest_experimental

      - name: Package Artifacts for release
        env:
          VERSION: ${{ needs.configuration.outputs.version }}
        run: |
          mkdir releases
          mv build_oculus_quest/*/com.Icosa.OpenBrush*apk releases/OpenBrush_Quest_$VERSION.apk
          mv build_oculus_quest_experimental/*/com.Icosa.OpenBrush*apk releases/OpenBrush_Quest_Experimental_$VERSION.apk
          mv build_windows_openxr/StandaloneWindows64-OpenXR/ releases/OpenBrush_Desktop_$VERSION/
          mv build_windows_openxr_experimental/StandaloneWindows64-OpenXR/ releases/OpenBrush_Desktop_Experimental_$VERSION/
          mv build_windows_rift/StandaloneWindows64-Oculus/ releases/OpenBrush_Rift_$VERSION/
          mv build_windows_rift_experimental/StandaloneWindows64-Oculus/ releases/OpenBrush_Rift_Experimental_$VERSION/
          cd releases
          zip -r OpenBrush_Desktop_$VERSION.zip OpenBrush_Desktop_$VERSION/
          zip -r OpenBrush_Desktop_Experimental_$VERSION.zip OpenBrush_Desktop_Experimental_$VERSION/
          zip -r OpenBrush_Rift_$VERSION.zip OpenBrush_Rift_$VERSION/
          zip -r OpenBrush_Rift_Experimental_$VERSION.zip OpenBrush_Rift_Experimental_$VERSION/
          rm -rf OpenBrush_Desktop_$VERSION
          rm -rf OpenBrush_Desktop_Experimental_$VERSION
          rm -rf OpenBrush_Rift_$VERSION
          rm -rf OpenBrush_Rift_Experimental_$VERSION
      - name: Publish
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: ${{ needs.configuration.outputs.changelog }}
          prerelease: ${{ needs.configuration.outputs.prerelease }}
          tag_name: ${{ needs.configuration.outputs.version }}
          files: releases/*

  publish_steam:
    name: Publish Steam Release
    needs: [configuration, build]
    if: |
      github.event_name == 'push' &&
      github.repository == 'icosa-gallery/open-brush' &&
      (github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true  # We don't use LFS, but it adds no time, and leave it here in case we do at some point later
      - name: Setup steamcmd
        uses: CyberAndrii/setup-steamcmd@v1.1.1
      - name: Restore steam login config
        run: |
          mkdir -p /home/runner/Steam/config
          echo "${{ secrets.STEAM_CONFIG_VDF}}" | base64 -d - > /home/runner/Steam/config/config.vdf
          echo "${{ secrets.STEAM_SSFN }}" | base64 -d - > /home/runner/Steam/${{ secrets.STEAM_SSFN_FILENAME }}
      - name: Download Build Artifacts (Windows OpenXR)
        uses: actions/download-artifact@v2
        with:
          name: Windows OpenXR
          path: build_windows_openxr
      - name: Download Build Artifacts (Windows OpenXR Experimental)
        uses: actions/download-artifact@v2
        with:
          name: Windows OpenXR Experimental
          path: build_windows_openxr_experimental
      - name: Upload Regular Build
        run: |
          pip install -U j2cli
          j2 Support/steam/app.vdf.j2 > build_windows_openxr/app.vdf
          j2 Support/steam/main_depot.vdf.j2 > build_windows_openxr/main_depot.vdf
          cp Support/steam/installscript_win.vdf build_windows_openxr/
          steamcmd +login $STEAM_USERNAME $STEAM_PASSWORD +run_app_build $(pwd)/build_windows_openxr/app.vdf +quit
        env:
          STEAM_USERNAME: ${{ secrets.STEAM_USERNAME }}
          STEAM_PASSWORD: ${{ secrets.STEAM_PASSWORD }}
          VERSION: ${{ needs.configuration.outputs.version }}
          OPEN_BRUSH_APP_ID: 1634870
          OPEN_BRUSH_WINDOWS_DEPOT_ID: 1634871
          CHANNEL: prerelease
      - name: Upload Experimental Build
        run: |
          pip install -U j2cli
          j2 Support/steam/app.vdf.j2 > build_windows_openxr_experimental/app.vdf
          j2 Support/steam/main_depot.vdf.j2 > build_windows_openxr_experimental/main_depot.vdf
          cp Support/steam/installscript_win.vdf build_windows_openxr_experimental/
          steamcmd +login $STEAM_USERNAME $STEAM_PASSWORD +run_app_build $(pwd)/build_windows_openxr_experimental/app.vdf +quit
        env:
          STEAM_USERNAME: ${{ secrets.STEAM_USERNAME }}
          STEAM_PASSWORD: ${{ secrets.STEAM_PASSWORD }}
          VERSION: ${{ needs.configuration.outputs.version }}
          OPEN_BRUSH_APP_ID: 1634870
          OPEN_BRUSH_WINDOWS_DEPOT_ID: 1634871
          CHANNEL: prerelease-experimental
      - name: Save logs
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: steamcmd logs
          path: build_output/


  publish_itch:
    name: Publish Itch.io Release
    needs: [configuration, build]
    runs-on: ubuntu-latest
    env:
      ITCH_SUBCHANNEL_NAME: ${{ needs.configuration.outputs.itchchannelname }}
      BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
      ITCH_GAME: openbrush
      ITCH_USER: openbrush
      VERSION: ${{ needs.configuration.outputs.version }}
    if: |
      github.event_name == 'push' &&
      github.repository == 'icosa-gallery/open-brush' &&
      (github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/v'))

    steps:
      - name: Download Build Artifacts (Windows OpenXR)
        uses: actions/download-artifact@v2
        with:
          name: Windows OpenXR
          path: build_windows_openxr

      - name: Download Build Artifacts (Windows OpenXR Experimental)
        uses: actions/download-artifact@v2
        with:
          name: Windows OpenXR Experimental
          path: build_windows_openxr_experimental

      - name: Download Build Artifacts (Oculus Quest)
        uses: actions/download-artifact@v2
        with:
          name: Oculus Quest
          path: build_oculus_quest

      - name: Download Build Artifacts (Oculus Quest Experimental)
        uses: actions/download-artifact@v2
        with:
          name: Oculus Quest Experimental
          path: build_oculus_quest_experimental

      - name: Package Artifacts for release
        run: |
          mkdir releases
          mv build_oculus_quest/*/com.Icosa.OpenBrush*apk releases/OpenBrush_Quest_$VERSION.apk
          mv build_oculus_quest_experimental/*/com.Icosa.OpenBrush*apk releases/OpenBrush_Quest_Experimental_$VERSION.apk
          mv build_windows_openxr/StandaloneWindows64-OpenXR/ releases/OpenBrush_Desktop_$VERSION/
          mv build_windows_openxr_experimental/StandaloneWindows64-OpenXR/ releases/OpenBrush_Desktop_Experimental_$VERSION/
      - name: Publish Windows
        uses: josephbmanley/butler-publish-itchio-action@master
        env:
          CHANNEL: windows-${{ env.ITCH_SUBCHANNEL_NAME }}
          PACKAGE: releases/OpenBrush_Desktop_${{ needs.configuration.outputs.version }}
      - name: Publish Windows Experimental
        uses: josephbmanley/butler-publish-itchio-action@master
        env:
          CHANNEL: windows-${{ env.ITCH_SUBCHANNEL_NAME }}-experimental
          PACKAGE: releases/OpenBrush_Desktop_Experimental_${{ needs.configuration.outputs.version }}
      - name: Publish Quest
        uses: josephbmanley/butler-publish-itchio-action@master
        env:
          CHANNEL: android-quest-${{ env.ITCH_SUBCHANNEL_NAME }}
          PACKAGE: releases/OpenBrush_Quest_${{ needs.configuration.outputs.version }}.apk
      - name: Publish Quest Experimental
        uses: josephbmanley/butler-publish-itchio-action@master
        env:
          CHANNEL: android-quest-${{ env.ITCH_SUBCHANNEL_NAME }}-experimental
          PACKAGE: releases/OpenBrush_Quest_Experimental_${{ needs.configuration.outputs.version }}.apk

  publish_oculus:
    name: Publish Oculus Release
    needs: [configuration, build]
    runs-on: macos-latest  # the ovr-platform-util tool is only available for Mac and Windows
    if: |
      github.event_name == 'push' &&
      github.repository == 'icosa-gallery/open-brush' &&
      (github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/v'))

    steps:
      - name: Download Build Artifacts (Windows Rift)
        uses: actions/download-artifact@v2
        with:
          name: Windows Rift
          path: build_windows_rift
      - name: Download Build Artifacts (Oculus Quest)
        uses: actions/download-artifact@v2
        with:
          name: Oculus Quest
          path: build_oculus_quest
      - name: Publish Oculus Builds
        env:
          VERSION: ${{ needs.configuration.outputs.version }}
          PRERELEASE: ${{ needs.configuration.outputs.prerelease }}
          OCULUS_RIFT_APP_ID: ${{ secrets.OCULUS_RIFT_APP_ID }}
          OCULUS_RIFT_APP_SECRET: ${{ secrets.OCULUS_RIFT_APP_SECRET }}
          OCULUS_QUEST_APP_ID: ${{ secrets.OCULUS_QUEST_APP_ID }}
          OCULUS_QUEST_APP_SECRET: ${{ secrets.OCULUS_QUEST_APP_SECRET }}
        run: |
          mkdir releases
          mv build_oculus_quest/*/com.Icosa.OpenBrush*apk releases/OpenBrush_Quest_$VERSION.apk
          mv build_oculus_quest/*/com.Icosa.OpenBrush*.symbols.zip releases/symbols.zip
          mv build_windows_rift/StandaloneWindows64-Oculus/ releases/OpenBrush_Rift_$VERSION/
          cd releases
          unzip symbols.zip
          zip -r OpenBrush_Rift_$VERSION.zip OpenBrush_Rift_$VERSION/
          curl -L 'https://www.oculus.com/download_app/?id=1462426033810370' -o ovr-platform-util
          chmod 755 ovr-platform-util

          if [ "$PRERELEASE" == "false" ]
          then
            ./ovr-platform-util upload-quest-build --app-id ${OCULUS_QUEST_APP_ID} --app-secret ${OCULUS_QUEST_APP_SECRET} --apk OpenBrush_Quest_$VERSION.apk --channel LIVE --debug_symbols_dir ./arm64-v8a/ --debug-symbols-pattern '*.so'
            ./ovr-platform-util upload-rift-build --app-id ${OCULUS_RIFT_APP_ID} --app-secret ${OCULUS_RIFT_APP_SECRET} --build-dir OpenBrush_Rift_$VERSION --launch-file OpenBrush.exe --channel LIVE --version $VERSION --firewall_exceptions true --redistributables 822786567843179,1675031999409058,2657209094360789
          else
            ./ovr-platform-util upload-quest-build --app-id ${OCULUS_QUEST_APP_ID} --app-secret ${OCULUS_QUEST_APP_SECRET} --apk OpenBrush_Quest_$VERSION.apk --channel Beta --debug_symbols_dir ./arm64-v8a/ --debug-symbols-pattern '*.so'
            ./ovr-platform-util upload-rift-build --app-id ${OCULUS_RIFT_APP_ID} --app-secret ${OCULUS_RIFT_APP_SECRET} --build-dir OpenBrush_Rift_$VERSION --launch-file OpenBrush.exe --channel BETA --version $VERSION --firewall_exceptions true --redistributables 822786567843179,1675031999409058,2657209094360789
          fi
